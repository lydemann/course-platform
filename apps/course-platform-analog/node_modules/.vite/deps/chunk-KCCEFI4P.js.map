{
  "version": 3,
  "sources": ["../../../../../node_modules/.pnpm/@apollo+client@3.9.4_graphql@15.8.0_subscriptions-transport-ws@0.9.19_graphql@15.8.0_/node_modules/@apollo/client/link/utils/fromError.js", "../../../../../node_modules/.pnpm/@apollo+client@3.9.4_graphql@15.8.0_subscriptions-transport-ws@0.9.19_graphql@15.8.0_/node_modules/@apollo/client/link/utils/throwServerError.js", "../../../../../node_modules/.pnpm/@apollo+client@3.9.4_graphql@15.8.0_subscriptions-transport-ws@0.9.19_graphql@15.8.0_/node_modules/@apollo/client/link/utils/validateOperation.js", "../../../../../node_modules/.pnpm/@apollo+client@3.9.4_graphql@15.8.0_subscriptions-transport-ws@0.9.19_graphql@15.8.0_/node_modules/@apollo/client/link/utils/createOperation.js", "../../../../../node_modules/.pnpm/@apollo+client@3.9.4_graphql@15.8.0_subscriptions-transport-ws@0.9.19_graphql@15.8.0_/node_modules/@apollo/client/link/utils/transformOperation.js", "../../../../../node_modules/.pnpm/@apollo+client@3.9.4_graphql@15.8.0_subscriptions-transport-ws@0.9.19_graphql@15.8.0_/node_modules/@apollo/client/link/utils/filterOperationVariables.js", "../../../../../node_modules/.pnpm/@apollo+client@3.9.4_graphql@15.8.0_subscriptions-transport-ws@0.9.19_graphql@15.8.0_/node_modules/@apollo/client/link/core/ApolloLink.js", "../../../../../node_modules/.pnpm/@apollo+client@3.9.4_graphql@15.8.0_subscriptions-transport-ws@0.9.19_graphql@15.8.0_/node_modules/@apollo/client/link/core/empty.js", "../../../../../node_modules/.pnpm/@apollo+client@3.9.4_graphql@15.8.0_subscriptions-transport-ws@0.9.19_graphql@15.8.0_/node_modules/@apollo/client/link/core/from.js", "../../../../../node_modules/.pnpm/@apollo+client@3.9.4_graphql@15.8.0_subscriptions-transport-ws@0.9.19_graphql@15.8.0_/node_modules/@apollo/client/link/core/split.js", "../../../../../node_modules/.pnpm/@apollo+client@3.9.4_graphql@15.8.0_subscriptions-transport-ws@0.9.19_graphql@15.8.0_/node_modules/@apollo/client/link/core/concat.js", "../../../../../node_modules/.pnpm/@apollo+client@3.9.4_graphql@15.8.0_subscriptions-transport-ws@0.9.19_graphql@15.8.0_/node_modules/@apollo/client/link/core/execute.js", "../../../../../node_modules/.pnpm/@apollo+client@3.9.4_graphql@15.8.0_subscriptions-transport-ws@0.9.19_graphql@15.8.0_/node_modules/@apollo/client/core/networkStatus.js", "../../../../../node_modules/.pnpm/@apollo+client@3.9.4_graphql@15.8.0_subscriptions-transport-ws@0.9.19_graphql@15.8.0_/node_modules/@apollo/client/core/ApolloClient.js", "../../../../../node_modules/.pnpm/@apollo+client@3.9.4_graphql@15.8.0_subscriptions-transport-ws@0.9.19_graphql@15.8.0_/node_modules/@apollo/client/link/http/parseAndCheckHttpResponse.js", "../../../../../node_modules/.pnpm/@apollo+client@3.9.4_graphql@15.8.0_subscriptions-transport-ws@0.9.19_graphql@15.8.0_/node_modules/@apollo/client/link/http/iterators/async.js", "../../../../../node_modules/.pnpm/@apollo+client@3.9.4_graphql@15.8.0_subscriptions-transport-ws@0.9.19_graphql@15.8.0_/node_modules/@apollo/client/link/http/iterators/nodeStream.js", "../../../../../node_modules/.pnpm/@apollo+client@3.9.4_graphql@15.8.0_subscriptions-transport-ws@0.9.19_graphql@15.8.0_/node_modules/@apollo/client/link/http/iterators/promise.js", "../../../../../node_modules/.pnpm/@apollo+client@3.9.4_graphql@15.8.0_subscriptions-transport-ws@0.9.19_graphql@15.8.0_/node_modules/@apollo/client/link/http/iterators/reader.js", "../../../../../node_modules/.pnpm/@apollo+client@3.9.4_graphql@15.8.0_subscriptions-transport-ws@0.9.19_graphql@15.8.0_/node_modules/@apollo/client/link/http/responseIterator.js", "../../../../../node_modules/.pnpm/@apollo+client@3.9.4_graphql@15.8.0_subscriptions-transport-ws@0.9.19_graphql@15.8.0_/node_modules/@apollo/client/errors/index.js", "../../../../../node_modules/.pnpm/@apollo+client@3.9.4_graphql@15.8.0_subscriptions-transport-ws@0.9.19_graphql@15.8.0_/node_modules/@apollo/client/link/http/serializeFetchParameter.js", "../../../../../node_modules/.pnpm/@apollo+client@3.9.4_graphql@15.8.0_subscriptions-transport-ws@0.9.19_graphql@15.8.0_/node_modules/@apollo/client/link/http/selectHttpOptionsAndBody.js", "../../../../../node_modules/.pnpm/@apollo+client@3.9.4_graphql@15.8.0_subscriptions-transport-ws@0.9.19_graphql@15.8.0_/node_modules/@apollo/client/link/http/checkFetcher.js", "../../../../../node_modules/.pnpm/@apollo+client@3.9.4_graphql@15.8.0_subscriptions-transport-ws@0.9.19_graphql@15.8.0_/node_modules/@apollo/client/link/http/selectURI.js", "../../../../../node_modules/.pnpm/@apollo+client@3.9.4_graphql@15.8.0_subscriptions-transport-ws@0.9.19_graphql@15.8.0_/node_modules/@apollo/client/link/http/createHttpLink.js", "../../../../../node_modules/.pnpm/@apollo+client@3.9.4_graphql@15.8.0_subscriptions-transport-ws@0.9.19_graphql@15.8.0_/node_modules/@apollo/client/link/http/rewriteURIForGET.js", "../../../../../node_modules/.pnpm/@apollo+client@3.9.4_graphql@15.8.0_subscriptions-transport-ws@0.9.19_graphql@15.8.0_/node_modules/@apollo/client/link/http/HttpLink.js", "../../../../../node_modules/.pnpm/@apollo+client@3.9.4_graphql@15.8.0_subscriptions-transport-ws@0.9.19_graphql@15.8.0_/node_modules/@apollo/client/core/QueryManager.js", "../../../../../node_modules/.pnpm/@apollo+client@3.9.4_graphql@15.8.0_subscriptions-transport-ws@0.9.19_graphql@15.8.0_/node_modules/@apollo/client/core/ObservableQuery.js", "../../../../../node_modules/.pnpm/@apollo+client@3.9.4_graphql@15.8.0_subscriptions-transport-ws@0.9.19_graphql@15.8.0_/node_modules/@apollo/client/core/equalByQuery.js", "../../../../../node_modules/.pnpm/@apollo+client@3.9.4_graphql@15.8.0_subscriptions-transport-ws@0.9.19_graphql@15.8.0_/node_modules/@apollo/client/core/LocalState.js", "../../../../../node_modules/.pnpm/@apollo+client@3.9.4_graphql@15.8.0_subscriptions-transport-ws@0.9.19_graphql@15.8.0_/node_modules/@apollo/client/core/QueryInfo.js", "../../../../../node_modules/.pnpm/@apollo+client@3.9.4_graphql@15.8.0_subscriptions-transport-ws@0.9.19_graphql@15.8.0_/node_modules/@apollo/client/core/index.js"],
  "sourcesContent": ["import { Observable } from \"../../utilities/index.js\";\nexport function fromError(errorValue) {\n    return new Observable(function (observer) {\n        observer.error(errorValue);\n    });\n}\n", "export var throwServerError = function (response, result, message) {\n    var error = new Error(message);\n    error.name = \"ServerError\";\n    error.response = response;\n    error.statusCode = response.status;\n    error.result = result;\n    throw error;\n};\n", "import { newInvariantError } from \"../../utilities/globals/index.js\";\nexport function validateOperation(operation) {\n    var OPERATION_FIELDS = [\n        \"query\",\n        \"operationName\",\n        \"variables\",\n        \"extensions\",\n        \"context\",\n    ];\n    for (var _i = 0, _a = Object.keys(operation); _i < _a.length; _i++) {\n        var key = _a[_i];\n        if (OPERATION_FIELDS.indexOf(key) < 0) {\n            throw newInvariantError(43, key);\n        }\n    }\n    return operation;\n}\n", "import { __assign } from \"tslib\";\nexport function createOperation(starting, operation) {\n    var context = __assign({}, starting);\n    var setContext = function (next) {\n        if (typeof next === \"function\") {\n            context = __assign(__assign({}, context), next(context));\n        }\n        else {\n            context = __assign(__assign({}, context), next);\n        }\n    };\n    var getContext = function () { return (__assign({}, context)); };\n    Object.defineProperty(operation, \"setContext\", {\n        enumerable: false,\n        value: setContext,\n    });\n    Object.defineProperty(operation, \"getContext\", {\n        enumerable: false,\n        value: getContext,\n    });\n    return operation;\n}\n", "import { getOperationName } from \"../../utilities/index.js\";\nexport function transformOperation(operation) {\n    var transformedOperation = {\n        variables: operation.variables || {},\n        extensions: operation.extensions || {},\n        operationName: operation.operationName,\n        query: operation.query,\n    };\n    // Best guess at an operation name\n    if (!transformedOperation.operationName) {\n        transformedOperation.operationName =\n            typeof transformedOperation.query !== \"string\" ?\n                getOperationName(transformedOperation.query) || undefined\n                : \"\";\n    }\n    return transformedOperation;\n}\n", "import { __assign } from \"tslib\";\nimport { visit } from \"graphql\";\nexport function filterOperationVariables(variables, query) {\n    var result = __assign({}, variables);\n    var unusedNames = new Set(Object.keys(variables));\n    visit(query, {\n        Variable: function (node, _key, parent) {\n            // A variable type definition at the top level of a query is not\n            // enough to silence server-side errors about the variable being\n            // unused, so variable definitions do not count as usage.\n            // https://spec.graphql.org/draft/#sec-All-Variables-Used\n            if (parent &&\n                parent.kind !== \"VariableDefinition\") {\n                unusedNames.delete(node.name.value);\n            }\n        },\n    });\n    unusedNames.forEach(function (name) {\n        delete result[name];\n    });\n    return result;\n}\n", "import { newInvariantError, invariant } from \"../../utilities/globals/index.js\";\nimport { Observable } from \"../../utilities/index.js\";\nimport { validateOperation, createOperation, transformOperation, } from \"../utils/index.js\";\nfunction passthrough(op, forward) {\n    return (forward ? forward(op) : Observable.of());\n}\nfunction toLink(handler) {\n    return typeof handler === \"function\" ? new ApolloLink(handler) : handler;\n}\nfunction isTerminating(link) {\n    return link.request.length <= 1;\n}\nvar ApolloLink = /** @class */ (function () {\n    function ApolloLink(request) {\n        if (request)\n            this.request = request;\n    }\n    ApolloLink.empty = function () {\n        return new ApolloLink(function () { return Observable.of(); });\n    };\n    ApolloLink.from = function (links) {\n        if (links.length === 0)\n            return ApolloLink.empty();\n        return links.map(toLink).reduce(function (x, y) { return x.concat(y); });\n    };\n    ApolloLink.split = function (test, left, right) {\n        var leftLink = toLink(left);\n        var rightLink = toLink(right || new ApolloLink(passthrough));\n        var ret;\n        if (isTerminating(leftLink) && isTerminating(rightLink)) {\n            ret = new ApolloLink(function (operation) {\n                return test(operation) ?\n                    leftLink.request(operation) || Observable.of()\n                    : rightLink.request(operation) || Observable.of();\n            });\n        }\n        else {\n            ret = new ApolloLink(function (operation, forward) {\n                return test(operation) ?\n                    leftLink.request(operation, forward) || Observable.of()\n                    : rightLink.request(operation, forward) || Observable.of();\n            });\n        }\n        return Object.assign(ret, { left: leftLink, right: rightLink });\n    };\n    ApolloLink.execute = function (link, operation) {\n        return (link.request(createOperation(operation.context, transformOperation(validateOperation(operation)))) || Observable.of());\n    };\n    ApolloLink.concat = function (first, second) {\n        var firstLink = toLink(first);\n        if (isTerminating(firstLink)) {\n            globalThis.__DEV__ !== false && invariant.warn(35, firstLink);\n            return firstLink;\n        }\n        var nextLink = toLink(second);\n        var ret;\n        if (isTerminating(nextLink)) {\n            ret = new ApolloLink(function (operation) {\n                return firstLink.request(operation, function (op) { return nextLink.request(op) || Observable.of(); }) || Observable.of();\n            });\n        }\n        else {\n            ret = new ApolloLink(function (operation, forward) {\n                return (firstLink.request(operation, function (op) {\n                    return nextLink.request(op, forward) || Observable.of();\n                }) || Observable.of());\n            });\n        }\n        return Object.assign(ret, { left: firstLink, right: nextLink });\n    };\n    ApolloLink.prototype.split = function (test, left, right) {\n        return this.concat(ApolloLink.split(test, left, right || new ApolloLink(passthrough)));\n    };\n    ApolloLink.prototype.concat = function (next) {\n        return ApolloLink.concat(this, next);\n    };\n    ApolloLink.prototype.request = function (operation, forward) {\n        throw newInvariantError(36);\n    };\n    ApolloLink.prototype.onError = function (error, observer) {\n        if (observer && observer.error) {\n            observer.error(error);\n            // Returning false indicates that observer.error does not need to be\n            // called again, since it was already called (on the previous line).\n            // Calling observer.error again would not cause any real problems,\n            // since only the first call matters, but custom onError functions\n            // might have other reasons for wanting to prevent the default\n            // behavior by returning false.\n            return false;\n        }\n        // Throw errors will be passed to observer.error.\n        throw error;\n    };\n    ApolloLink.prototype.setOnError = function (fn) {\n        this.onError = fn;\n        return this;\n    };\n    return ApolloLink;\n}());\nexport { ApolloLink };\n", "import { ApolloLink } from \"./ApolloLink.js\";\nexport var empty = ApolloLink.empty;\n", "import { ApolloLink } from \"./ApolloLink.js\";\nexport var from = ApolloLink.from;\n", "import { ApolloLink } from \"./ApolloLink.js\";\nexport var split = ApolloLink.split;\n", "import { ApolloLink } from \"./ApolloLink.js\";\nexport var concat = ApolloLink.concat;\n", "import { ApolloLink } from \"./ApolloLink.js\";\nexport var execute = ApolloLink.execute;\n", "/**\n * The current status of a query’s execution in our system.\n */\nexport var NetworkStatus;\n(function (NetworkStatus) {\n    /**\n     * The query has never been run before and the query is now currently running. A query will still\n     * have this network status even if a partial data result was returned from the cache, but a\n     * query was dispatched anyway.\n     */\n    NetworkStatus[NetworkStatus[\"loading\"] = 1] = \"loading\";\n    /**\n     * If `setVariables` was called and a query was fired because of that then the network status\n     * will be `setVariables` until the result of that query comes back.\n     */\n    NetworkStatus[NetworkStatus[\"setVariables\"] = 2] = \"setVariables\";\n    /**\n     * Indicates that `fetchMore` was called on this query and that the query created is currently in\n     * flight.\n     */\n    NetworkStatus[NetworkStatus[\"fetchMore\"] = 3] = \"fetchMore\";\n    /**\n     * Similar to the `setVariables` network status. It means that `refetch` was called on a query\n     * and the refetch request is currently in flight.\n     */\n    NetworkStatus[NetworkStatus[\"refetch\"] = 4] = \"refetch\";\n    /**\n     * Indicates that a polling query is currently in flight. So for example if you are polling a\n     * query every 10 seconds then the network status will switch to `poll` every 10 seconds whenever\n     * a poll request has been sent but not resolved.\n     */\n    NetworkStatus[NetworkStatus[\"poll\"] = 6] = \"poll\";\n    /**\n     * No request is in flight for this query, and no errors happened. Everything is OK.\n     */\n    NetworkStatus[NetworkStatus[\"ready\"] = 7] = \"ready\";\n    /**\n     * No request is in flight for this query, but one or more errors were detected.\n     */\n    NetworkStatus[NetworkStatus[\"error\"] = 8] = \"error\";\n})(NetworkStatus || (NetworkStatus = {}));\n/**\n * Returns true if there is currently a network request in flight according to a given network\n * status.\n */\nexport function isNetworkRequestInFlight(networkStatus) {\n    return networkStatus ? networkStatus < 7 : false;\n}\n/**\n * Returns true if the network request is in ready or error state according to a given network\n * status.\n */\nexport function isNetworkRequestSettled(networkStatus) {\n    return networkStatus === 7 || networkStatus === 8;\n}\n", "import { __assign } from \"tslib\";\nimport { invariant, newInvariantError } from \"../utilities/globals/index.js\";\nimport { ApolloLink, execute } from \"../link/core/index.js\";\nimport { version } from \"../version.js\";\nimport { HttpLink } from \"../link/http/index.js\";\nimport { QueryManager } from \"./QueryManager.js\";\nimport { LocalState } from \"./LocalState.js\";\nvar hasSuggestedDevtools = false;\n// Though mergeOptions now resides in @apollo/client/utilities, it was\n// previously declared and exported from this module, and then reexported from\n// @apollo/client/core. Since we need to preserve that API anyway, the easiest\n// solution is to reexport mergeOptions where it was previously declared (here).\nimport { mergeOptions } from \"../utilities/index.js\";\nimport { getApolloClientMemoryInternals } from \"../utilities/caching/getMemoryInternals.js\";\nexport { mergeOptions };\n/**\n * This is the primary Apollo Client class. It is used to send GraphQL documents (i.e. queries\n * and mutations) to a GraphQL spec-compliant server over an {@link ApolloLink} instance,\n * receive results from the server and cache the results in a store. It also delivers updates\n * to GraphQL queries through {@link Observable} instances.\n */\nvar ApolloClient = /** @class */ (function () {\n    /**\n     * Constructs an instance of {@link ApolloClient}.\n     *\n     * @example\n     * ```js\n     * import { ApolloClient, InMemoryCache } from '@apollo/client';\n     *\n     * const cache = new InMemoryCache();\n     *\n     * const client = new ApolloClient({\n     *   // Provide required constructor fields\n     *   cache: cache,\n     *   uri: 'http://localhost:4000/',\n     *\n     *   // Provide some optional constructor fields\n     *   name: 'react-web-client',\n     *   version: '1.3',\n     *   queryDeduplication: false,\n     *   defaultOptions: {\n     *     watchQuery: {\n     *       fetchPolicy: 'cache-and-network',\n     *     },\n     *   },\n     * });\n     * ```\n     */\n    function ApolloClient(options) {\n        var _this = this;\n        this.resetStoreCallbacks = [];\n        this.clearStoreCallbacks = [];\n        if (!options.cache) {\n            throw newInvariantError(15);\n        }\n        var uri = options.uri, credentials = options.credentials, headers = options.headers, cache = options.cache, documentTransform = options.documentTransform, _a = options.ssrMode, ssrMode = _a === void 0 ? false : _a, _b = options.ssrForceFetchDelay, ssrForceFetchDelay = _b === void 0 ? 0 : _b, \n        // Expose the client instance as window.__APOLLO_CLIENT__ and call\n        // onBroadcast in queryManager.broadcastQueries to enable browser\n        // devtools, but disable them by default in production.\n        _c = options.connectToDevTools, \n        // Expose the client instance as window.__APOLLO_CLIENT__ and call\n        // onBroadcast in queryManager.broadcastQueries to enable browser\n        // devtools, but disable them by default in production.\n        connectToDevTools = _c === void 0 ? typeof window === \"object\" &&\n            !window.__APOLLO_CLIENT__ &&\n            globalThis.__DEV__ !== false : _c, _d = options.queryDeduplication, queryDeduplication = _d === void 0 ? true : _d, defaultOptions = options.defaultOptions, defaultContext = options.defaultContext, _e = options.assumeImmutableResults, assumeImmutableResults = _e === void 0 ? cache.assumeImmutableResults : _e, resolvers = options.resolvers, typeDefs = options.typeDefs, fragmentMatcher = options.fragmentMatcher, clientAwarenessName = options.name, clientAwarenessVersion = options.version;\n        var link = options.link;\n        if (!link) {\n            link =\n                uri ? new HttpLink({ uri: uri, credentials: credentials, headers: headers }) : ApolloLink.empty();\n        }\n        this.link = link;\n        this.cache = cache;\n        this.disableNetworkFetches = ssrMode || ssrForceFetchDelay > 0;\n        this.queryDeduplication = queryDeduplication;\n        this.defaultOptions = defaultOptions || Object.create(null);\n        this.typeDefs = typeDefs;\n        if (ssrForceFetchDelay) {\n            setTimeout(function () { return (_this.disableNetworkFetches = false); }, ssrForceFetchDelay);\n        }\n        this.watchQuery = this.watchQuery.bind(this);\n        this.query = this.query.bind(this);\n        this.mutate = this.mutate.bind(this);\n        this.resetStore = this.resetStore.bind(this);\n        this.reFetchObservableQueries = this.reFetchObservableQueries.bind(this);\n        this.version = version;\n        this.localState = new LocalState({\n            cache: cache,\n            client: this,\n            resolvers: resolvers,\n            fragmentMatcher: fragmentMatcher,\n        });\n        this.queryManager = new QueryManager({\n            cache: this.cache,\n            link: this.link,\n            defaultOptions: this.defaultOptions,\n            defaultContext: defaultContext,\n            documentTransform: documentTransform,\n            queryDeduplication: queryDeduplication,\n            ssrMode: ssrMode,\n            clientAwareness: {\n                name: clientAwarenessName,\n                version: clientAwarenessVersion,\n            },\n            localState: this.localState,\n            assumeImmutableResults: assumeImmutableResults,\n            onBroadcast: connectToDevTools ?\n                function () {\n                    if (_this.devToolsHookCb) {\n                        _this.devToolsHookCb({\n                            action: {},\n                            state: {\n                                queries: _this.queryManager.getQueryStore(),\n                                mutations: _this.queryManager.mutationStore || {},\n                            },\n                            dataWithOptimisticResults: _this.cache.extract(true),\n                        });\n                    }\n                }\n                : void 0,\n        });\n        if (connectToDevTools)\n            this.connectToDevTools();\n    }\n    ApolloClient.prototype.connectToDevTools = function () {\n        if (typeof window === \"object\") {\n            var windowWithDevTools = window;\n            var devtoolsSymbol = Symbol.for(\"apollo.devtools\");\n            (windowWithDevTools[devtoolsSymbol] =\n                windowWithDevTools[devtoolsSymbol] || []).push(this);\n            windowWithDevTools.__APOLLO_CLIENT__ = this;\n        }\n        /**\n         * Suggest installing the devtools for developers who don't have them\n         */\n        if (!hasSuggestedDevtools && globalThis.__DEV__ !== false) {\n            hasSuggestedDevtools = true;\n            setTimeout(function () {\n                if (typeof window !== \"undefined\" &&\n                    window.document &&\n                    window.top === window.self &&\n                    !window.__APOLLO_DEVTOOLS_GLOBAL_HOOK__) {\n                    var nav = window.navigator;\n                    var ua = nav && nav.userAgent;\n                    var url = void 0;\n                    if (typeof ua === \"string\") {\n                        if (ua.indexOf(\"Chrome/\") > -1) {\n                            url =\n                                \"https://chrome.google.com/webstore/detail/\" +\n                                    \"apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm\";\n                        }\n                        else if (ua.indexOf(\"Firefox/\") > -1) {\n                            url =\n                                \"https://addons.mozilla.org/en-US/firefox/addon/apollo-developer-tools/\";\n                        }\n                    }\n                    if (url) {\n                        globalThis.__DEV__ !== false && invariant.log(\"Download the Apollo DevTools for a better development \" +\n                            \"experience: %s\", url);\n                    }\n                }\n            }, 10000);\n        }\n    };\n    Object.defineProperty(ApolloClient.prototype, \"documentTransform\", {\n        /**\n         * The `DocumentTransform` used to modify GraphQL documents before a request\n         * is made. If a custom `DocumentTransform` is not provided, this will be the\n         * default document transform.\n         */\n        get: function () {\n            return this.queryManager.documentTransform;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Call this method to terminate any active client processes, making it safe\n     * to dispose of this `ApolloClient` instance.\n     */\n    ApolloClient.prototype.stop = function () {\n        this.queryManager.stop();\n    };\n    /**\n     * This watches the cache store of the query according to the options specified and\n     * returns an {@link ObservableQuery}. We can subscribe to this {@link ObservableQuery} and\n     * receive updated results through a GraphQL observer when the cache store changes.\n     *\n     * Note that this method is not an implementation of GraphQL subscriptions. Rather,\n     * it uses Apollo's store in order to reactively deliver updates to your query results.\n     *\n     * For example, suppose you call watchQuery on a GraphQL query that fetches a person's\n     * first and last name and this person has a particular object identifier, provided by\n     * dataIdFromObject. Later, a different query fetches that same person's\n     * first and last name and the first name has now changed. Then, any observers associated\n     * with the results of the first query will be updated with a new result object.\n     *\n     * Note that if the cache does not change, the subscriber will *not* be notified.\n     *\n     * See [here](https://medium.com/apollo-stack/the-concepts-of-graphql-bc68bd819be3#.3mb0cbcmc) for\n     * a description of store reactivity.\n     */\n    ApolloClient.prototype.watchQuery = function (options) {\n        if (this.defaultOptions.watchQuery) {\n            options = mergeOptions(this.defaultOptions.watchQuery, options);\n        }\n        // XXX Overwriting options is probably not the best way to do this long term...\n        if (this.disableNetworkFetches &&\n            (options.fetchPolicy === \"network-only\" ||\n                options.fetchPolicy === \"cache-and-network\")) {\n            options = __assign(__assign({}, options), { fetchPolicy: \"cache-first\" });\n        }\n        return this.queryManager.watchQuery(options);\n    };\n    /**\n     * This resolves a single query according to the options specified and\n     * returns a `Promise` which is either resolved with the resulting data\n     * or rejected with an error.\n     *\n     * @param options - An object of type {@link QueryOptions} that allows us to\n     * describe how this query should be treated e.g. whether it should hit the\n     * server at all or just resolve from the cache, etc.\n     */\n    ApolloClient.prototype.query = function (options) {\n        if (this.defaultOptions.query) {\n            options = mergeOptions(this.defaultOptions.query, options);\n        }\n        invariant(options.fetchPolicy !== \"cache-and-network\", 16);\n        if (this.disableNetworkFetches && options.fetchPolicy === \"network-only\") {\n            options = __assign(__assign({}, options), { fetchPolicy: \"cache-first\" });\n        }\n        return this.queryManager.query(options);\n    };\n    /**\n     * This resolves a single mutation according to the options specified and returns a\n     * Promise which is either resolved with the resulting data or rejected with an\n     * error. In some cases both `data` and `errors` might be undefined, for example\n     * when `errorPolicy` is set to `'ignore'`.\n     *\n     * It takes options as an object with the following keys and values:\n     */\n    ApolloClient.prototype.mutate = function (options) {\n        if (this.defaultOptions.mutate) {\n            options = mergeOptions(this.defaultOptions.mutate, options);\n        }\n        return this.queryManager.mutate(options);\n    };\n    /**\n     * This subscribes to a graphql subscription according to the options specified and returns an\n     * {@link Observable} which either emits received data or an error.\n     */\n    ApolloClient.prototype.subscribe = function (options) {\n        return this.queryManager.startGraphQLSubscription(options);\n    };\n    /**\n     * Tries to read some data from the store in the shape of the provided\n     * GraphQL query without making a network request. This method will start at\n     * the root query. To start at a specific id returned by `dataIdFromObject`\n     * use `readFragment`.\n     *\n     * @param optimistic - Set to `true` to allow `readQuery` to return\n     * optimistic results. Is `false` by default.\n     */\n    ApolloClient.prototype.readQuery = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = false; }\n        return this.cache.readQuery(options, optimistic);\n    };\n    /**\n     * Tries to read some data from the store in the shape of the provided\n     * GraphQL fragment without making a network request. This method will read a\n     * GraphQL fragment from any arbitrary id that is currently cached, unlike\n     * `readQuery` which will only read from the root query.\n     *\n     * You must pass in a GraphQL document with a single fragment or a document\n     * with multiple fragments that represent what you are reading. If you pass\n     * in a document with multiple fragments then you must also specify a\n     * `fragmentName`.\n     *\n     * @param optimistic - Set to `true` to allow `readFragment` to return\n     * optimistic results. Is `false` by default.\n     */\n    ApolloClient.prototype.readFragment = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = false; }\n        return this.cache.readFragment(options, optimistic);\n    };\n    /**\n     * Writes some data in the shape of the provided GraphQL query directly to\n     * the store. This method will start at the root query. To start at a\n     * specific id returned by `dataIdFromObject` then use `writeFragment`.\n     */\n    ApolloClient.prototype.writeQuery = function (options) {\n        var ref = this.cache.writeQuery(options);\n        if (options.broadcast !== false) {\n            this.queryManager.broadcastQueries();\n        }\n        return ref;\n    };\n    /**\n     * Writes some data in the shape of the provided GraphQL fragment directly to\n     * the store. This method will write to a GraphQL fragment from any arbitrary\n     * id that is currently cached, unlike `writeQuery` which will only write\n     * from the root query.\n     *\n     * You must pass in a GraphQL document with a single fragment or a document\n     * with multiple fragments that represent what you are writing. If you pass\n     * in a document with multiple fragments then you must also specify a\n     * `fragmentName`.\n     */\n    ApolloClient.prototype.writeFragment = function (options) {\n        var ref = this.cache.writeFragment(options);\n        if (options.broadcast !== false) {\n            this.queryManager.broadcastQueries();\n        }\n        return ref;\n    };\n    ApolloClient.prototype.__actionHookForDevTools = function (cb) {\n        this.devToolsHookCb = cb;\n    };\n    ApolloClient.prototype.__requestRaw = function (payload) {\n        return execute(this.link, payload);\n    };\n    /**\n     * Resets your entire store by clearing out your cache and then re-executing\n     * all of your active queries. This makes it so that you may guarantee that\n     * there is no data left in your store from a time before you called this\n     * method.\n     *\n     * `resetStore()` is useful when your user just logged out. You’ve removed the\n     * user session, and you now want to make sure that any references to data you\n     * might have fetched while the user session was active is gone.\n     *\n     * It is important to remember that `resetStore()` *will* refetch any active\n     * queries. This means that any components that might be mounted will execute\n     * their queries again using your network interface. If you do not want to\n     * re-execute any queries then you should make sure to stop watching any\n     * active queries.\n     */\n    ApolloClient.prototype.resetStore = function () {\n        var _this = this;\n        return Promise.resolve()\n            .then(function () {\n            return _this.queryManager.clearStore({\n                discardWatches: false,\n            });\n        })\n            .then(function () { return Promise.all(_this.resetStoreCallbacks.map(function (fn) { return fn(); })); })\n            .then(function () { return _this.reFetchObservableQueries(); });\n    };\n    /**\n     * Remove all data from the store. Unlike `resetStore`, `clearStore` will\n     * not refetch any active queries.\n     */\n    ApolloClient.prototype.clearStore = function () {\n        var _this = this;\n        return Promise.resolve()\n            .then(function () {\n            return _this.queryManager.clearStore({\n                discardWatches: true,\n            });\n        })\n            .then(function () { return Promise.all(_this.clearStoreCallbacks.map(function (fn) { return fn(); })); });\n    };\n    /**\n     * Allows callbacks to be registered that are executed when the store is\n     * reset. `onResetStore` returns an unsubscribe function that can be used\n     * to remove registered callbacks.\n     */\n    ApolloClient.prototype.onResetStore = function (cb) {\n        var _this = this;\n        this.resetStoreCallbacks.push(cb);\n        return function () {\n            _this.resetStoreCallbacks = _this.resetStoreCallbacks.filter(function (c) { return c !== cb; });\n        };\n    };\n    /**\n     * Allows callbacks to be registered that are executed when the store is\n     * cleared. `onClearStore` returns an unsubscribe function that can be used\n     * to remove registered callbacks.\n     */\n    ApolloClient.prototype.onClearStore = function (cb) {\n        var _this = this;\n        this.clearStoreCallbacks.push(cb);\n        return function () {\n            _this.clearStoreCallbacks = _this.clearStoreCallbacks.filter(function (c) { return c !== cb; });\n        };\n    };\n    /**\n     * Refetches all of your active queries.\n     *\n     * `reFetchObservableQueries()` is useful if you want to bring the client back to proper state in case of a network outage\n     *\n     * It is important to remember that `reFetchObservableQueries()` *will* refetch any active\n     * queries. This means that any components that might be mounted will execute\n     * their queries again using your network interface. If you do not want to\n     * re-execute any queries then you should make sure to stop watching any\n     * active queries.\n     * Takes optional parameter `includeStandby` which will include queries in standby-mode when refetching.\n     */\n    ApolloClient.prototype.reFetchObservableQueries = function (includeStandby) {\n        return this.queryManager.reFetchObservableQueries(includeStandby);\n    };\n    /**\n     * Refetches specified active queries. Similar to \"reFetchObservableQueries()\" but with a specific list of queries.\n     *\n     * `refetchQueries()` is useful for use cases to imperatively refresh a selection of queries.\n     *\n     * It is important to remember that `refetchQueries()` *will* refetch specified active\n     * queries. This means that any components that might be mounted will execute\n     * their queries again using your network interface. If you do not want to\n     * re-execute any queries then you should make sure to stop watching any\n     * active queries.\n     */\n    ApolloClient.prototype.refetchQueries = function (options) {\n        var map = this.queryManager.refetchQueries(options);\n        var queries = [];\n        var results = [];\n        map.forEach(function (result, obsQuery) {\n            queries.push(obsQuery);\n            results.push(result);\n        });\n        var result = Promise.all(results);\n        // In case you need the raw results immediately, without awaiting\n        // Promise.all(results):\n        result.queries = queries;\n        result.results = results;\n        // If you decide to ignore the result Promise because you're using\n        // result.queries and result.results instead, you shouldn't have to worry\n        // about preventing uncaught rejections for the Promise.all result.\n        result.catch(function (error) {\n            globalThis.__DEV__ !== false && invariant.debug(17, error);\n        });\n        return result;\n    };\n    /**\n     * Get all currently active `ObservableQuery` objects, in a `Map` keyed by\n     * query ID strings.\n     *\n     * An \"active\" query is one that has observers and a `fetchPolicy` other than\n     * \"standby\" or \"cache-only\".\n     *\n     * You can include all `ObservableQuery` objects (including the inactive ones)\n     * by passing \"all\" instead of \"active\", or you can include just a subset of\n     * active queries by passing an array of query names or DocumentNode objects.\n     */\n    ApolloClient.prototype.getObservableQueries = function (include) {\n        if (include === void 0) { include = \"active\"; }\n        return this.queryManager.getObservableQueries(include);\n    };\n    /**\n     * Exposes the cache's complete state, in a serializable format for later restoration.\n     */\n    ApolloClient.prototype.extract = function (optimistic) {\n        return this.cache.extract(optimistic);\n    };\n    /**\n     * Replaces existing state in the cache (if any) with the values expressed by\n     * `serializedState`.\n     *\n     * Called when hydrating a cache (server side rendering, or offline storage),\n     * and also (potentially) during hot reloads.\n     */\n    ApolloClient.prototype.restore = function (serializedState) {\n        return this.cache.restore(serializedState);\n    };\n    /**\n     * Add additional local resolvers.\n     */\n    ApolloClient.prototype.addResolvers = function (resolvers) {\n        this.localState.addResolvers(resolvers);\n    };\n    /**\n     * Set (override existing) local resolvers.\n     */\n    ApolloClient.prototype.setResolvers = function (resolvers) {\n        this.localState.setResolvers(resolvers);\n    };\n    /**\n     * Get all registered local resolvers.\n     */\n    ApolloClient.prototype.getResolvers = function () {\n        return this.localState.getResolvers();\n    };\n    /**\n     * Set a custom local state fragment matcher.\n     */\n    ApolloClient.prototype.setLocalStateFragmentMatcher = function (fragmentMatcher) {\n        this.localState.setFragmentMatcher(fragmentMatcher);\n    };\n    /**\n     * Define a new ApolloLink (or link chain) that Apollo Client will use.\n     */\n    ApolloClient.prototype.setLink = function (newLink) {\n        this.link = this.queryManager.link = newLink;\n    };\n    Object.defineProperty(ApolloClient.prototype, \"defaultContext\", {\n        get: function () {\n            return this.queryManager.defaultContext;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return ApolloClient;\n}());\nexport { ApolloClient };\nif (globalThis.__DEV__ !== false) {\n    ApolloClient.prototype.getMemoryInternals = getApolloClientMemoryInternals;\n}\n", "import { __assign, __awaiter, __generator } from \"tslib\";\nimport { responseIterator } from \"./responseIterator.js\";\nimport { throwServerError } from \"../utils/index.js\";\nimport { PROTOCOL_ERRORS_SYMBOL } from \"../../errors/index.js\";\nimport { isApolloPayloadResult } from \"../../utilities/common/incrementalResult.js\";\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nexport function readMultipartBody(response, nextValue) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function () {\n        var decoder, contentType, delimiter, boundaryVal, boundary, buffer, iterator, running, _b, value, done, chunk, searchFrom, bi, message, i, headers, contentType_1, body, result, next;\n        var _c, _d;\n        return __generator(this, function (_e) {\n            switch (_e.label) {\n                case 0:\n                    if (TextDecoder === undefined) {\n                        throw new Error(\"TextDecoder must be defined in the environment: please import a polyfill.\");\n                    }\n                    decoder = new TextDecoder(\"utf-8\");\n                    contentType = (_a = response.headers) === null || _a === void 0 ? void 0 : _a.get(\"content-type\");\n                    delimiter = \"boundary=\";\n                    boundaryVal = (contentType === null || contentType === void 0 ? void 0 : contentType.includes(delimiter)) ?\n                        contentType === null || contentType === void 0 ? void 0 : contentType.substring((contentType === null || contentType === void 0 ? void 0 : contentType.indexOf(delimiter)) + delimiter.length).replace(/['\"]/g, \"\").replace(/\\;(.*)/gm, \"\").trim()\n                        : \"-\";\n                    boundary = \"\\r\\n--\".concat(boundaryVal);\n                    buffer = \"\";\n                    iterator = responseIterator(response);\n                    running = true;\n                    _e.label = 1;\n                case 1:\n                    if (!running) return [3 /*break*/, 3];\n                    return [4 /*yield*/, iterator.next()];\n                case 2:\n                    _b = _e.sent(), value = _b.value, done = _b.done;\n                    chunk = typeof value === \"string\" ? value : decoder.decode(value);\n                    searchFrom = buffer.length - boundary.length + 1;\n                    running = !done;\n                    buffer += chunk;\n                    bi = buffer.indexOf(boundary, searchFrom);\n                    while (bi > -1) {\n                        message = void 0;\n                        _c = [\n                            buffer.slice(0, bi),\n                            buffer.slice(bi + boundary.length),\n                        ], message = _c[0], buffer = _c[1];\n                        i = message.indexOf(\"\\r\\n\\r\\n\");\n                        headers = parseHeaders(message.slice(0, i));\n                        contentType_1 = headers[\"content-type\"];\n                        if (contentType_1 &&\n                            contentType_1.toLowerCase().indexOf(\"application/json\") === -1) {\n                            throw new Error(\"Unsupported patch content type: application/json is required.\");\n                        }\n                        body = message.slice(i);\n                        if (body) {\n                            result = parseJsonBody(response, body);\n                            if (Object.keys(result).length > 1 ||\n                                \"data\" in result ||\n                                \"incremental\" in result ||\n                                \"errors\" in result ||\n                                \"payload\" in result) {\n                                if (isApolloPayloadResult(result)) {\n                                    next = {};\n                                    if (\"payload\" in result) {\n                                        next = __assign({}, result.payload);\n                                    }\n                                    if (\"errors\" in result) {\n                                        next = __assign(__assign({}, next), { extensions: __assign(__assign({}, (\"extensions\" in next ? next.extensions : null)), (_d = {}, _d[PROTOCOL_ERRORS_SYMBOL] = result.errors, _d)) });\n                                    }\n                                    nextValue(next);\n                                }\n                                else {\n                                    // for the last chunk with only `hasNext: false`\n                                    // we don't need to call observer.next as there is no data/errors\n                                    nextValue(result);\n                                }\n                            }\n                            else if (\n                            // If the chunk contains only a \"hasNext: false\", we can call\n                            // observer.complete() immediately.\n                            Object.keys(result).length === 1 &&\n                                \"hasNext\" in result &&\n                                !result.hasNext) {\n                                return [2 /*return*/];\n                            }\n                        }\n                        bi = buffer.indexOf(boundary);\n                    }\n                    return [3 /*break*/, 1];\n                case 3: return [2 /*return*/];\n            }\n        });\n    });\n}\nexport function parseHeaders(headerText) {\n    var headersInit = {};\n    headerText.split(\"\\n\").forEach(function (line) {\n        var i = line.indexOf(\":\");\n        if (i > -1) {\n            // normalize headers to lowercase\n            var name_1 = line.slice(0, i).trim().toLowerCase();\n            var value = line.slice(i + 1).trim();\n            headersInit[name_1] = value;\n        }\n    });\n    return headersInit;\n}\nexport function parseJsonBody(response, bodyText) {\n    if (response.status >= 300) {\n        // Network error\n        var getResult = function () {\n            try {\n                return JSON.parse(bodyText);\n            }\n            catch (err) {\n                return bodyText;\n            }\n        };\n        throwServerError(response, getResult(), \"Response not successful: Received status code \".concat(response.status));\n    }\n    try {\n        return JSON.parse(bodyText);\n    }\n    catch (err) {\n        var parseError = err;\n        parseError.name = \"ServerParseError\";\n        parseError.response = response;\n        parseError.statusCode = response.status;\n        parseError.bodyText = bodyText;\n        throw parseError;\n    }\n}\nexport function handleError(err, observer) {\n    // if it is a network error, BUT there is graphql result info fire\n    // the next observer before calling error this gives apollo-client\n    // (and react-apollo) the `graphqlErrors` and `networkErrors` to\n    // pass to UI this should only happen if we *also* have data as\n    // part of the response key per the spec\n    if (err.result && err.result.errors && err.result.data) {\n        // if we don't call next, the UI can only show networkError\n        // because AC didn't get any graphqlErrors this is graphql\n        // execution result info (i.e errors and possibly data) this is\n        // because there is no formal spec how errors should translate to\n        // http status codes. So an auth error (401) could have both data\n        // from a public field, errors from a private field, and a status\n        // of 401\n        // {\n        //  user { // this will have errors\n        //    firstName\n        //  }\n        //  products { // this is public so will have data\n        //    cost\n        //  }\n        // }\n        //\n        // the result of above *could* look like this:\n        // {\n        //   data: { products: [{ cost: \"$10\" }] },\n        //   errors: [{\n        //      message: 'your session has timed out',\n        //      path: []\n        //   }]\n        // }\n        // status code of above would be a 401\n        // in the UI you want to show data where you can, errors as data where you can\n        // and use correct http status codes\n        observer.next(err.result);\n    }\n    observer.error(err);\n}\nexport function parseAndCheckHttpResponse(operations) {\n    return function (response) {\n        return response\n            .text()\n            .then(function (bodyText) { return parseJsonBody(response, bodyText); })\n            .then(function (result) {\n            if (!Array.isArray(result) &&\n                !hasOwnProperty.call(result, \"data\") &&\n                !hasOwnProperty.call(result, \"errors\")) {\n                // Data error\n                throwServerError(response, result, \"Server response was missing for query '\".concat(Array.isArray(operations) ?\n                    operations.map(function (op) { return op.operationName; })\n                    : operations.operationName, \"'.\"));\n            }\n            return result;\n        });\n    };\n}\n", "/**\n * Original source:\n * https://github.com/kmalakoff/response-iterator/blob/master/src/iterators/async.ts\n */\nexport default function asyncIterator(source) {\n    var _a;\n    var iterator = source[Symbol.asyncIterator]();\n    return _a = {\n            next: function () {\n                return iterator.next();\n            }\n        },\n        _a[Symbol.asyncIterator] = function () {\n            return this;\n        },\n        _a;\n}\n", "/**\n * Original source:\n * https://github.com/kmalakoff/response-iterator/blob/master/src/iterators/nodeStream.ts\n */\nimport { canUseAsyncIteratorSymbol } from \"../../../utilities/index.js\";\nexport default function nodeStreamIterator(stream) {\n    var cleanup = null;\n    var error = null;\n    var done = false;\n    var data = [];\n    var waiting = [];\n    function onData(chunk) {\n        if (error)\n            return;\n        if (waiting.length) {\n            var shiftedArr = waiting.shift();\n            if (Array.isArray(shiftedArr) && shiftedArr[0]) {\n                return shiftedArr[0]({ value: chunk, done: false });\n            }\n        }\n        data.push(chunk);\n    }\n    function onError(err) {\n        error = err;\n        var all = waiting.slice();\n        all.forEach(function (pair) {\n            pair[1](err);\n        });\n        !cleanup || cleanup();\n    }\n    function onEnd() {\n        done = true;\n        var all = waiting.slice();\n        all.forEach(function (pair) {\n            pair[0]({ value: undefined, done: true });\n        });\n        !cleanup || cleanup();\n    }\n    cleanup = function () {\n        cleanup = null;\n        stream.removeListener(\"data\", onData);\n        stream.removeListener(\"error\", onError);\n        stream.removeListener(\"end\", onEnd);\n        stream.removeListener(\"finish\", onEnd);\n        stream.removeListener(\"close\", onEnd);\n    };\n    stream.on(\"data\", onData);\n    stream.on(\"error\", onError);\n    stream.on(\"end\", onEnd);\n    stream.on(\"finish\", onEnd);\n    stream.on(\"close\", onEnd);\n    function getNext() {\n        return new Promise(function (resolve, reject) {\n            if (error)\n                return reject(error);\n            if (data.length)\n                return resolve({ value: data.shift(), done: false });\n            if (done)\n                return resolve({ value: undefined, done: true });\n            waiting.push([resolve, reject]);\n        });\n    }\n    var iterator = {\n        next: function () {\n            return getNext();\n        },\n    };\n    if (canUseAsyncIteratorSymbol) {\n        iterator[Symbol.asyncIterator] = function () {\n            return this;\n        };\n    }\n    return iterator;\n}\n", "/**\n * Original source:\n * https://github.com/kmalakoff/response-iterator/blob/master/src/iterators/promise.ts\n */\nimport { canUseAsyncIteratorSymbol } from \"../../../utilities/index.js\";\nexport default function promiseIterator(promise) {\n    var resolved = false;\n    var iterator = {\n        next: function () {\n            if (resolved)\n                return Promise.resolve({\n                    value: undefined,\n                    done: true,\n                });\n            resolved = true;\n            return new Promise(function (resolve, reject) {\n                promise\n                    .then(function (value) {\n                    resolve({ value: value, done: false });\n                })\n                    .catch(reject);\n            });\n        },\n    };\n    if (canUseAsyncIteratorSymbol) {\n        iterator[Symbol.asyncIterator] = function () {\n            return this;\n        };\n    }\n    return iterator;\n}\n", "/**\n * Original source:\n * https://github.com/kmalakoff/response-iterator/blob/master/src/iterators/reader.ts\n */\nimport { canUseAsyncIteratorSymbol } from \"../../../utilities/index.js\";\nexport default function readerIterator(reader) {\n    var iterator = {\n        next: function () {\n            return reader.read();\n        },\n    };\n    if (canUseAsyncIteratorSymbol) {\n        iterator[Symbol.asyncIterator] = function () {\n            return this;\n        };\n    }\n    return iterator;\n}\n", "/**\n * Original source:\n * https://github.com/kmalakoff/response-iterator/blob/master/src/index.ts\n */\nimport { canUseAsyncIteratorSymbol } from \"../../utilities/index.js\";\nimport asyncIterator from \"./iterators/async.js\";\nimport nodeStreamIterator from \"./iterators/nodeStream.js\";\nimport promiseIterator from \"./iterators/promise.js\";\nimport readerIterator from \"./iterators/reader.js\";\nfunction isNodeResponse(value) {\n    return !!value.body;\n}\nfunction isReadableStream(value) {\n    return !!value.getReader;\n}\nfunction isAsyncIterableIterator(value) {\n    return !!(canUseAsyncIteratorSymbol &&\n        value[Symbol.asyncIterator]);\n}\nfunction isStreamableBlob(value) {\n    return !!value.stream;\n}\nfunction isBlob(value) {\n    return !!value.arrayBuffer;\n}\nfunction isNodeReadableStream(value) {\n    return !!value.pipe;\n}\nexport function responseIterator(response) {\n    var body = response;\n    if (isNodeResponse(response))\n        body = response.body;\n    if (isAsyncIterableIterator(body))\n        return asyncIterator(body);\n    if (isReadableStream(body))\n        return readerIterator(body.getReader());\n    // this errors without casting to ReadableStream<T>\n    // because Blob.stream() returns a NodeJS ReadableStream\n    if (isStreamableBlob(body)) {\n        return readerIterator(body.stream().getReader());\n    }\n    if (isBlob(body))\n        return promiseIterator(body.arrayBuffer());\n    if (isNodeReadableStream(body))\n        return nodeStreamIterator(body);\n    throw new Error(\"Unknown body type for responseIterator. Please pass a streamable response.\");\n}\n", "import { __extends, __spreadArray } from \"tslib\";\nimport \"../utilities/globals/index.js\";\nimport { isNonNullObject } from \"../utilities/index.js\";\n// This Symbol allows us to pass transport-specific errors from the link chain\n// into QueryManager/client internals without risking a naming collision within\n// extensions (which implementers can use as they see fit).\nexport var PROTOCOL_ERRORS_SYMBOL = Symbol();\nexport function graphQLResultHasProtocolErrors(result) {\n    if (result.extensions) {\n        return Array.isArray(result.extensions[PROTOCOL_ERRORS_SYMBOL]);\n    }\n    return false;\n}\nexport function isApolloError(err) {\n    return err.hasOwnProperty(\"graphQLErrors\");\n}\n// Sets the error message on this error according to the\n// the GraphQL and network errors that are present.\n// If the error message has already been set through the\n// constructor or otherwise, this function is a nop.\nvar generateErrorMessage = function (err) {\n    var errors = __spreadArray(__spreadArray(__spreadArray([], err.graphQLErrors, true), err.clientErrors, true), err.protocolErrors, true);\n    if (err.networkError)\n        errors.push(err.networkError);\n    return (errors\n        // The rest of the code sometimes unsafely types non-Error objects as GraphQLErrors\n        .map(function (err) {\n        return (isNonNullObject(err) && err.message) || \"Error message not found.\";\n    })\n        .join(\"\\n\"));\n};\nvar ApolloError = /** @class */ (function (_super) {\n    __extends(ApolloError, _super);\n    // Constructs an instance of ApolloError given a GraphQLError\n    // or a network error. Note that one of these has to be a valid\n    // value or the constructed error will be meaningless.\n    function ApolloError(_a) {\n        var graphQLErrors = _a.graphQLErrors, protocolErrors = _a.protocolErrors, clientErrors = _a.clientErrors, networkError = _a.networkError, errorMessage = _a.errorMessage, extraInfo = _a.extraInfo;\n        var _this = _super.call(this, errorMessage) || this;\n        _this.name = \"ApolloError\";\n        _this.graphQLErrors = graphQLErrors || [];\n        _this.protocolErrors = protocolErrors || [];\n        _this.clientErrors = clientErrors || [];\n        _this.networkError = networkError || null;\n        _this.message = errorMessage || generateErrorMessage(_this);\n        _this.extraInfo = extraInfo;\n        // We're not using `Object.setPrototypeOf` here as it isn't fully\n        // supported on Android (see issue #3236).\n        _this.__proto__ = ApolloError.prototype;\n        return _this;\n    }\n    return ApolloError;\n}(Error));\nexport { ApolloError };\n", "import { newInvariantError } from \"../../utilities/globals/index.js\";\nexport var serializeFetchParameter = function (p, label) {\n    var serialized;\n    try {\n        serialized = JSON.stringify(p);\n    }\n    catch (e) {\n        var parseError = newInvariantError(39, label, e.message);\n        parseError.parseError = e;\n        throw parseError;\n    }\n    return serialized;\n};\n", "import { __assign, __spreadArray } from \"tslib\";\nimport { print } from \"../../utilities/index.js\";\nvar defaultHttpOptions = {\n    includeQuery: true,\n    includeExtensions: false,\n    preserveHeaderCase: false,\n};\nvar defaultHeaders = {\n    // headers are case insensitive (https://stackoverflow.com/a/5259004)\n    accept: \"*/*\",\n    // The content-type header describes the type of the body of the request, and\n    // so it typically only is sent with requests that actually have bodies. One\n    // could imagine that Apollo Client would remove this header when constructing\n    // a GET request (which has no body), but we historically have not done that.\n    // This means that browsers will preflight all Apollo Client requests (even\n    // GET requests). Apollo Server's CSRF prevention feature (introduced in\n    // AS3.7) takes advantage of this fact and does not block requests with this\n    // header. If you want to drop this header from GET requests, then you should\n    // probably replace it with a `apollo-require-preflight` header, or servers\n    // with CSRF prevention enabled might block your GET request. See\n    // https://www.apollographql.com/docs/apollo-server/security/cors/#preventing-cross-site-request-forgery-csrf\n    // for more details.\n    \"content-type\": \"application/json\",\n};\nvar defaultOptions = {\n    method: \"POST\",\n};\nexport var fallbackHttpConfig = {\n    http: defaultHttpOptions,\n    headers: defaultHeaders,\n    options: defaultOptions,\n};\nexport var defaultPrinter = function (ast, printer) { return printer(ast); };\nexport function selectHttpOptionsAndBody(operation, fallbackConfig) {\n    var configs = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        configs[_i - 2] = arguments[_i];\n    }\n    configs.unshift(fallbackConfig);\n    return selectHttpOptionsAndBodyInternal.apply(void 0, __spreadArray([operation,\n        defaultPrinter], configs, false));\n}\nexport function selectHttpOptionsAndBodyInternal(operation, printer) {\n    var configs = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        configs[_i - 2] = arguments[_i];\n    }\n    var options = {};\n    var http = {};\n    configs.forEach(function (config) {\n        options = __assign(__assign(__assign({}, options), config.options), { headers: __assign(__assign({}, options.headers), config.headers) });\n        if (config.credentials) {\n            options.credentials = config.credentials;\n        }\n        http = __assign(__assign({}, http), config.http);\n    });\n    if (options.headers) {\n        options.headers = removeDuplicateHeaders(options.headers, http.preserveHeaderCase);\n    }\n    //The body depends on the http options\n    var operationName = operation.operationName, extensions = operation.extensions, variables = operation.variables, query = operation.query;\n    var body = { operationName: operationName, variables: variables };\n    if (http.includeExtensions)\n        body.extensions = extensions;\n    // not sending the query (i.e persisted queries)\n    if (http.includeQuery)\n        body.query = printer(query, print);\n    return {\n        options: options,\n        body: body,\n    };\n}\n// Remove potential duplicate header names, preserving last (by insertion order).\n// This is done to prevent unintentionally duplicating a header instead of\n// overwriting it (See #8447 and #8449).\nfunction removeDuplicateHeaders(headers, preserveHeaderCase) {\n    // If we're not preserving the case, just remove duplicates w/ normalization.\n    if (!preserveHeaderCase) {\n        var normalizedHeaders_1 = Object.create(null);\n        Object.keys(Object(headers)).forEach(function (name) {\n            normalizedHeaders_1[name.toLowerCase()] = headers[name];\n        });\n        return normalizedHeaders_1;\n    }\n    // If we are preserving the case, remove duplicates w/ normalization,\n    // preserving the original name.\n    // This allows for non-http-spec-compliant servers that expect intentionally\n    // capitalized header names (See #6741).\n    var headerData = Object.create(null);\n    Object.keys(Object(headers)).forEach(function (name) {\n        headerData[name.toLowerCase()] = {\n            originalName: name,\n            value: headers[name],\n        };\n    });\n    var normalizedHeaders = Object.create(null);\n    Object.keys(headerData).forEach(function (name) {\n        normalizedHeaders[headerData[name].originalName] = headerData[name].value;\n    });\n    return normalizedHeaders;\n}\n", "import { newInvariantError } from \"../../utilities/globals/index.js\";\nexport var checkFetcher = function (fetcher) {\n    if (!fetcher && typeof fetch === \"undefined\") {\n        throw newInvariantError(37);\n    }\n};\n", "export var selectURI = function (operation, fallbackURI) {\n    var context = operation.getContext();\n    var contextURI = context.uri;\n    if (contextURI) {\n        return contextURI;\n    }\n    else if (typeof fallbackURI === \"function\") {\n        return fallbackURI(operation);\n    }\n    else {\n        return fallbackURI || \"/graphql\";\n    }\n};\n", "import { __assign, __rest } from \"tslib\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport { ApolloLink } from \"../core/index.js\";\nimport { Observable, hasDirectives } from \"../../utilities/index.js\";\nimport { serializeFetchParameter } from \"./serializeFetchParameter.js\";\nimport { selectURI } from \"./selectURI.js\";\nimport { handleError, readMultipartBody, parseAndCheckHttpResponse, } from \"./parseAndCheckHttpResponse.js\";\nimport { checkFetcher } from \"./checkFetcher.js\";\nimport { selectHttpOptionsAndBodyInternal, defaultPrinter, fallbackHttpConfig, } from \"./selectHttpOptionsAndBody.js\";\nimport { rewriteURIForGET } from \"./rewriteURIForGET.js\";\nimport { fromError, filterOperationVariables } from \"../utils/index.js\";\nimport { maybe, getMainDefinition, removeClientSetsFromDocument, } from \"../../utilities/index.js\";\nvar backupFetch = maybe(function () { return fetch; });\nexport var createHttpLink = function (linkOptions) {\n    if (linkOptions === void 0) { linkOptions = {}; }\n    var _a = linkOptions.uri, uri = _a === void 0 ? \"/graphql\" : _a, \n    // use default global fetch if nothing passed in\n    preferredFetch = linkOptions.fetch, _b = linkOptions.print, print = _b === void 0 ? defaultPrinter : _b, includeExtensions = linkOptions.includeExtensions, preserveHeaderCase = linkOptions.preserveHeaderCase, useGETForQueries = linkOptions.useGETForQueries, _c = linkOptions.includeUnusedVariables, includeUnusedVariables = _c === void 0 ? false : _c, requestOptions = __rest(linkOptions, [\"uri\", \"fetch\", \"print\", \"includeExtensions\", \"preserveHeaderCase\", \"useGETForQueries\", \"includeUnusedVariables\"]);\n    if (globalThis.__DEV__ !== false) {\n        // Make sure at least one of preferredFetch, window.fetch, or backupFetch is\n        // defined, so requests won't fail at runtime.\n        checkFetcher(preferredFetch || backupFetch);\n    }\n    var linkConfig = {\n        http: { includeExtensions: includeExtensions, preserveHeaderCase: preserveHeaderCase },\n        options: requestOptions.fetchOptions,\n        credentials: requestOptions.credentials,\n        headers: requestOptions.headers,\n    };\n    return new ApolloLink(function (operation) {\n        var chosenURI = selectURI(operation, uri);\n        var context = operation.getContext();\n        // `apollographql-client-*` headers are automatically set if a\n        // `clientAwareness` object is found in the context. These headers are\n        // set first, followed by the rest of the headers pulled from\n        // `context.headers`. If desired, `apollographql-client-*` headers set by\n        // the `clientAwareness` object can be overridden by\n        // `apollographql-client-*` headers set in `context.headers`.\n        var clientAwarenessHeaders = {};\n        if (context.clientAwareness) {\n            var _a = context.clientAwareness, name_1 = _a.name, version = _a.version;\n            if (name_1) {\n                clientAwarenessHeaders[\"apollographql-client-name\"] = name_1;\n            }\n            if (version) {\n                clientAwarenessHeaders[\"apollographql-client-version\"] = version;\n            }\n        }\n        var contextHeaders = __assign(__assign({}, clientAwarenessHeaders), context.headers);\n        var contextConfig = {\n            http: context.http,\n            options: context.fetchOptions,\n            credentials: context.credentials,\n            headers: contextHeaders,\n        };\n        if (hasDirectives([\"client\"], operation.query)) {\n            var transformedQuery = removeClientSetsFromDocument(operation.query);\n            if (!transformedQuery) {\n                return fromError(new Error(\"HttpLink: Trying to send a client-only query to the server. To send to the server, ensure a non-client field is added to the query or set the `transformOptions.removeClientFields` option to `true`.\"));\n            }\n            operation.query = transformedQuery;\n        }\n        //uses fallback, link, and then context to build options\n        var _b = selectHttpOptionsAndBodyInternal(operation, print, fallbackHttpConfig, linkConfig, contextConfig), options = _b.options, body = _b.body;\n        if (body.variables && !includeUnusedVariables) {\n            body.variables = filterOperationVariables(body.variables, operation.query);\n        }\n        var controller;\n        if (!options.signal && typeof AbortController !== \"undefined\") {\n            controller = new AbortController();\n            options.signal = controller.signal;\n        }\n        // If requested, set method to GET if there are no mutations.\n        var definitionIsMutation = function (d) {\n            return d.kind === \"OperationDefinition\" && d.operation === \"mutation\";\n        };\n        var definitionIsSubscription = function (d) {\n            return d.kind === \"OperationDefinition\" && d.operation === \"subscription\";\n        };\n        var isSubscription = definitionIsSubscription(getMainDefinition(operation.query));\n        // does not match custom directives beginning with @defer\n        var hasDefer = hasDirectives([\"defer\"], operation.query);\n        if (useGETForQueries &&\n            !operation.query.definitions.some(definitionIsMutation)) {\n            options.method = \"GET\";\n        }\n        if (hasDefer || isSubscription) {\n            options.headers = options.headers || {};\n            var acceptHeader = \"multipart/mixed;\";\n            // Omit defer-specific headers if the user attempts to defer a selection\n            // set on a subscription and log a warning.\n            if (isSubscription && hasDefer) {\n                globalThis.__DEV__ !== false && invariant.warn(38);\n            }\n            if (isSubscription) {\n                acceptHeader +=\n                    \"boundary=graphql;subscriptionSpec=1.0,application/json\";\n            }\n            else if (hasDefer) {\n                acceptHeader += \"deferSpec=20220824,application/json\";\n            }\n            options.headers.accept = acceptHeader;\n        }\n        if (options.method === \"GET\") {\n            var _c = rewriteURIForGET(chosenURI, body), newURI = _c.newURI, parseError = _c.parseError;\n            if (parseError) {\n                return fromError(parseError);\n            }\n            chosenURI = newURI;\n        }\n        else {\n            try {\n                options.body = serializeFetchParameter(body, \"Payload\");\n            }\n            catch (parseError) {\n                return fromError(parseError);\n            }\n        }\n        return new Observable(function (observer) {\n            // Prefer linkOptions.fetch (preferredFetch) if provided, and otherwise\n            // fall back to the *current* global window.fetch function (see issue\n            // #7832), or (if all else fails) the backupFetch function we saved when\n            // this module was first evaluated. This last option protects against the\n            // removal of window.fetch, which is unlikely but not impossible.\n            var currentFetch = preferredFetch || maybe(function () { return fetch; }) || backupFetch;\n            var observerNext = observer.next.bind(observer);\n            currentFetch(chosenURI, options)\n                .then(function (response) {\n                var _a;\n                operation.setContext({ response: response });\n                var ctype = (_a = response.headers) === null || _a === void 0 ? void 0 : _a.get(\"content-type\");\n                if (ctype !== null && /^multipart\\/mixed/i.test(ctype)) {\n                    return readMultipartBody(response, observerNext);\n                }\n                else {\n                    return parseAndCheckHttpResponse(operation)(response).then(observerNext);\n                }\n            })\n                .then(function () {\n                controller = undefined;\n                observer.complete();\n            })\n                .catch(function (err) {\n                controller = undefined;\n                handleError(err, observer);\n            });\n            return function () {\n                // XXX support canceling this request\n                // https://developers.google.com/web/updates/2017/09/abortable-fetch\n                if (controller)\n                    controller.abort();\n            };\n        });\n    });\n};\n", "import { serializeFetchParameter } from \"./serializeFetchParameter.js\";\n// For GET operations, returns the given URI rewritten with parameters, or a\n// parse error.\nexport function rewriteURIForGET(chosenURI, body) {\n    // Implement the standard HTTP GET serialization, plus 'extensions'. Note\n    // the extra level of JSON serialization!\n    var queryParams = [];\n    var addQueryParam = function (key, value) {\n        queryParams.push(\"\".concat(key, \"=\").concat(encodeURIComponent(value)));\n    };\n    if (\"query\" in body) {\n        addQueryParam(\"query\", body.query);\n    }\n    if (body.operationName) {\n        addQueryParam(\"operationName\", body.operationName);\n    }\n    if (body.variables) {\n        var serializedVariables = void 0;\n        try {\n            serializedVariables = serializeFetchParameter(body.variables, \"Variables map\");\n        }\n        catch (parseError) {\n            return { parseError: parseError };\n        }\n        addQueryParam(\"variables\", serializedVariables);\n    }\n    if (body.extensions) {\n        var serializedExtensions = void 0;\n        try {\n            serializedExtensions = serializeFetchParameter(body.extensions, \"Extensions map\");\n        }\n        catch (parseError) {\n            return { parseError: parseError };\n        }\n        addQueryParam(\"extensions\", serializedExtensions);\n    }\n    // Reconstruct the URI with added query params.\n    // XXX This assumes that the URI is well-formed and that it doesn't\n    //     already contain any of these query params. We could instead use the\n    //     URL API and take a polyfill (whatwg-url@6) for older browsers that\n    //     don't support URLSearchParams. Note that some browsers (and\n    //     versions of whatwg-url) support URL but not URLSearchParams!\n    var fragment = \"\", preFragment = chosenURI;\n    var fragmentStart = chosenURI.indexOf(\"#\");\n    if (fragmentStart !== -1) {\n        fragment = chosenURI.substr(fragmentStart);\n        preFragment = chosenURI.substr(0, fragmentStart);\n    }\n    var queryParamsPrefix = preFragment.indexOf(\"?\") === -1 ? \"?\" : \"&\";\n    var newURI = preFragment + queryParamsPrefix + queryParams.join(\"&\") + fragment;\n    return { newURI: newURI };\n}\n", "import { __extends } from \"tslib\";\nimport { ApolloLink } from \"../core/index.js\";\nimport { createHttpLink } from \"./createHttpLink.js\";\nvar HttpLink = /** @class */ (function (_super) {\n    __extends(HttpLink, _super);\n    function HttpLink(options) {\n        if (options === void 0) { options = {}; }\n        var _this = _super.call(this, createHttpLink(options).request) || this;\n        _this.options = options;\n        return _this;\n    }\n    return HttpLink;\n}(ApolloLink));\nexport { HttpLink };\n", "import { __assign, __awaiter, __generator } from \"tslib\";\nimport { invariant, newInvariantError } from \"../utilities/globals/index.js\";\nimport { equal } from \"@wry/equality\";\nimport { execute } from \"../link/core/index.js\";\nimport { hasDirectives, isExecutionPatchIncrementalResult, isExecutionPatchResult, removeDirectivesFromDocument, } from \"../utilities/index.js\";\nimport { canonicalStringify } from \"../cache/index.js\";\nimport { getDefaultValues, getOperationDefinition, getOperationName, hasClientExports, graphQLResultHasError, getGraphQLErrorsFromResult, Observable, asyncMap, isNonEmptyArray, Concast, makeUniqueId, isDocumentNode, isNonNullObject, DocumentTransform, } from \"../utilities/index.js\";\nimport { mergeIncrementalData } from \"../utilities/common/incrementalResult.js\";\nimport { ApolloError, isApolloError, graphQLResultHasProtocolErrors, } from \"../errors/index.js\";\nimport { ObservableQuery, logMissingFieldErrors } from \"./ObservableQuery.js\";\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\nimport { LocalState } from \"./LocalState.js\";\nimport { QueryInfo, shouldWriteResult, } from \"./QueryInfo.js\";\nimport { PROTOCOL_ERRORS_SYMBOL } from \"../errors/index.js\";\nimport { print } from \"../utilities/index.js\";\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar IGNORE = Object.create(null);\nimport { Trie } from \"@wry/trie\";\nimport { AutoCleanedWeakCache, cacheSizes } from \"../utilities/index.js\";\nvar QueryManager = /** @class */ (function () {\n    function QueryManager(_a) {\n        var cache = _a.cache, link = _a.link, defaultOptions = _a.defaultOptions, documentTransform = _a.documentTransform, _b = _a.queryDeduplication, queryDeduplication = _b === void 0 ? false : _b, onBroadcast = _a.onBroadcast, _c = _a.ssrMode, ssrMode = _c === void 0 ? false : _c, _d = _a.clientAwareness, clientAwareness = _d === void 0 ? {} : _d, localState = _a.localState, _e = _a.assumeImmutableResults, assumeImmutableResults = _e === void 0 ? !!cache.assumeImmutableResults : _e, defaultContext = _a.defaultContext;\n        var _this = this;\n        this.clientAwareness = {};\n        // All the queries that the QueryManager is currently managing (not\n        // including mutations and subscriptions).\n        this.queries = new Map();\n        // Maps from queryId strings to Promise rejection functions for\n        // currently active queries and fetches.\n        // Use protected instead of private field so\n        // @apollo/experimental-nextjs-app-support can access type info.\n        this.fetchCancelFns = new Map();\n        this.transformCache = new AutoCleanedWeakCache(cacheSizes[\"queryManager.getDocumentInfo\"] ||\n            2000 /* defaultCacheSizes[\"queryManager.getDocumentInfo\"] */);\n        this.queryIdCounter = 1;\n        this.requestIdCounter = 1;\n        this.mutationIdCounter = 1;\n        // Use protected instead of private field so\n        // @apollo/experimental-nextjs-app-support can access type info.\n        this.inFlightLinkObservables = new Trie(false);\n        var defaultDocumentTransform = new DocumentTransform(function (document) { return _this.cache.transformDocument(document); }, \n        // Allow the apollo cache to manage its own transform caches\n        { cache: false });\n        this.cache = cache;\n        this.link = link;\n        this.defaultOptions = defaultOptions || Object.create(null);\n        this.queryDeduplication = queryDeduplication;\n        this.clientAwareness = clientAwareness;\n        this.localState = localState || new LocalState({ cache: cache });\n        this.ssrMode = ssrMode;\n        this.assumeImmutableResults = assumeImmutableResults;\n        this.documentTransform =\n            documentTransform ?\n                defaultDocumentTransform\n                    .concat(documentTransform)\n                    // The custom document transform may add new fragment spreads or new\n                    // field selections, so we want to give the cache a chance to run\n                    // again. For example, the InMemoryCache adds __typename to field\n                    // selections and fragments from the fragment registry.\n                    .concat(defaultDocumentTransform)\n                : defaultDocumentTransform;\n        this.defaultContext = defaultContext || Object.create(null);\n        if ((this.onBroadcast = onBroadcast)) {\n            this.mutationStore = Object.create(null);\n        }\n    }\n    /**\n     * Call this method to terminate any active query processes, making it safe\n     * to dispose of this QueryManager instance.\n     */\n    QueryManager.prototype.stop = function () {\n        var _this = this;\n        this.queries.forEach(function (_info, queryId) {\n            _this.stopQueryNoBroadcast(queryId);\n        });\n        this.cancelPendingFetches(newInvariantError(25));\n    };\n    QueryManager.prototype.cancelPendingFetches = function (error) {\n        this.fetchCancelFns.forEach(function (cancel) { return cancel(error); });\n        this.fetchCancelFns.clear();\n    };\n    QueryManager.prototype.mutate = function (_a) {\n        var _b, _c;\n        var mutation = _a.mutation, variables = _a.variables, optimisticResponse = _a.optimisticResponse, updateQueries = _a.updateQueries, _d = _a.refetchQueries, refetchQueries = _d === void 0 ? [] : _d, _e = _a.awaitRefetchQueries, awaitRefetchQueries = _e === void 0 ? false : _e, updateWithProxyFn = _a.update, onQueryUpdated = _a.onQueryUpdated, _f = _a.fetchPolicy, fetchPolicy = _f === void 0 ? ((_b = this.defaultOptions.mutate) === null || _b === void 0 ? void 0 : _b.fetchPolicy) || \"network-only\" : _f, _g = _a.errorPolicy, errorPolicy = _g === void 0 ? ((_c = this.defaultOptions.mutate) === null || _c === void 0 ? void 0 : _c.errorPolicy) || \"none\" : _g, keepRootFields = _a.keepRootFields, context = _a.context;\n        return __awaiter(this, void 0, void 0, function () {\n            var mutationId, hasClientExports, mutationStoreValue, isOptimistic, self;\n            return __generator(this, function (_h) {\n                switch (_h.label) {\n                    case 0:\n                        invariant(mutation, 26);\n                        invariant(fetchPolicy === \"network-only\" || fetchPolicy === \"no-cache\", 27);\n                        mutationId = this.generateMutationId();\n                        mutation = this.cache.transformForLink(this.transform(mutation));\n                        hasClientExports = this.getDocumentInfo(mutation).hasClientExports;\n                        variables = this.getVariables(mutation, variables);\n                        if (!hasClientExports) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.localState.addExportedVariables(mutation, variables, context)];\n                    case 1:\n                        variables = (_h.sent());\n                        _h.label = 2;\n                    case 2:\n                        mutationStoreValue = this.mutationStore &&\n                            (this.mutationStore[mutationId] = {\n                                mutation: mutation,\n                                variables: variables,\n                                loading: true,\n                                error: null,\n                            });\n                        isOptimistic = optimisticResponse &&\n                            this.markMutationOptimistic(optimisticResponse, {\n                                mutationId: mutationId,\n                                document: mutation,\n                                variables: variables,\n                                fetchPolicy: fetchPolicy,\n                                errorPolicy: errorPolicy,\n                                context: context,\n                                updateQueries: updateQueries,\n                                update: updateWithProxyFn,\n                                keepRootFields: keepRootFields,\n                            });\n                        this.broadcastQueries();\n                        self = this;\n                        return [2 /*return*/, new Promise(function (resolve, reject) {\n                                return asyncMap(self.getObservableFromLink(mutation, __assign(__assign({}, context), { optimisticResponse: isOptimistic ? optimisticResponse : void 0 }), variables, false), function (result) {\n                                    if (graphQLResultHasError(result) && errorPolicy === \"none\") {\n                                        throw new ApolloError({\n                                            graphQLErrors: getGraphQLErrorsFromResult(result),\n                                        });\n                                    }\n                                    if (mutationStoreValue) {\n                                        mutationStoreValue.loading = false;\n                                        mutationStoreValue.error = null;\n                                    }\n                                    var storeResult = __assign({}, result);\n                                    if (typeof refetchQueries === \"function\") {\n                                        refetchQueries = refetchQueries(storeResult);\n                                    }\n                                    if (errorPolicy === \"ignore\" && graphQLResultHasError(storeResult)) {\n                                        delete storeResult.errors;\n                                    }\n                                    return self.markMutationResult({\n                                        mutationId: mutationId,\n                                        result: storeResult,\n                                        document: mutation,\n                                        variables: variables,\n                                        fetchPolicy: fetchPolicy,\n                                        errorPolicy: errorPolicy,\n                                        context: context,\n                                        update: updateWithProxyFn,\n                                        updateQueries: updateQueries,\n                                        awaitRefetchQueries: awaitRefetchQueries,\n                                        refetchQueries: refetchQueries,\n                                        removeOptimistic: isOptimistic ? mutationId : void 0,\n                                        onQueryUpdated: onQueryUpdated,\n                                        keepRootFields: keepRootFields,\n                                    });\n                                }).subscribe({\n                                    next: function (storeResult) {\n                                        self.broadcastQueries();\n                                        // Since mutations might receive multiple payloads from the\n                                        // ApolloLink chain (e.g. when used with @defer),\n                                        // we resolve with a SingleExecutionResult or after the final\n                                        // ExecutionPatchResult has arrived and we have assembled the\n                                        // multipart response into a single result.\n                                        if (!(\"hasNext\" in storeResult) || storeResult.hasNext === false) {\n                                            resolve(storeResult);\n                                        }\n                                    },\n                                    error: function (err) {\n                                        if (mutationStoreValue) {\n                                            mutationStoreValue.loading = false;\n                                            mutationStoreValue.error = err;\n                                        }\n                                        if (isOptimistic) {\n                                            self.cache.removeOptimistic(mutationId);\n                                        }\n                                        self.broadcastQueries();\n                                        reject(err instanceof ApolloError ? err : (new ApolloError({\n                                            networkError: err,\n                                        })));\n                                    },\n                                });\n                            })];\n                }\n            });\n        });\n    };\n    QueryManager.prototype.markMutationResult = function (mutation, cache) {\n        var _this = this;\n        if (cache === void 0) { cache = this.cache; }\n        var result = mutation.result;\n        var cacheWrites = [];\n        var skipCache = mutation.fetchPolicy === \"no-cache\";\n        if (!skipCache && shouldWriteResult(result, mutation.errorPolicy)) {\n            if (!isExecutionPatchIncrementalResult(result)) {\n                cacheWrites.push({\n                    result: result.data,\n                    dataId: \"ROOT_MUTATION\",\n                    query: mutation.document,\n                    variables: mutation.variables,\n                });\n            }\n            if (isExecutionPatchIncrementalResult(result) &&\n                isNonEmptyArray(result.incremental)) {\n                var diff = cache.diff({\n                    id: \"ROOT_MUTATION\",\n                    // The cache complains if passed a mutation where it expects a\n                    // query, so we transform mutations and subscriptions to queries\n                    // (only once, thanks to this.transformCache).\n                    query: this.getDocumentInfo(mutation.document).asQuery,\n                    variables: mutation.variables,\n                    optimistic: false,\n                    returnPartialData: true,\n                });\n                var mergedData = void 0;\n                if (diff.result) {\n                    mergedData = mergeIncrementalData(diff.result, result);\n                }\n                if (typeof mergedData !== \"undefined\") {\n                    // cast the ExecutionPatchResult to FetchResult here since\n                    // ExecutionPatchResult never has `data` when returned from the server\n                    result.data = mergedData;\n                    cacheWrites.push({\n                        result: mergedData,\n                        dataId: \"ROOT_MUTATION\",\n                        query: mutation.document,\n                        variables: mutation.variables,\n                    });\n                }\n            }\n            var updateQueries_1 = mutation.updateQueries;\n            if (updateQueries_1) {\n                this.queries.forEach(function (_a, queryId) {\n                    var observableQuery = _a.observableQuery;\n                    var queryName = observableQuery && observableQuery.queryName;\n                    if (!queryName || !hasOwnProperty.call(updateQueries_1, queryName)) {\n                        return;\n                    }\n                    var updater = updateQueries_1[queryName];\n                    var _b = _this.queries.get(queryId), document = _b.document, variables = _b.variables;\n                    // Read the current query result from the store.\n                    var _c = cache.diff({\n                        query: document,\n                        variables: variables,\n                        returnPartialData: true,\n                        optimistic: false,\n                    }), currentQueryResult = _c.result, complete = _c.complete;\n                    if (complete && currentQueryResult) {\n                        // Run our reducer using the current query result and the mutation result.\n                        var nextQueryResult = updater(currentQueryResult, {\n                            mutationResult: result,\n                            queryName: (document && getOperationName(document)) || void 0,\n                            queryVariables: variables,\n                        });\n                        // Write the modified result back into the store if we got a new result.\n                        if (nextQueryResult) {\n                            cacheWrites.push({\n                                result: nextQueryResult,\n                                dataId: \"ROOT_QUERY\",\n                                query: document,\n                                variables: variables,\n                            });\n                        }\n                    }\n                });\n            }\n        }\n        if (cacheWrites.length > 0 ||\n            (mutation.refetchQueries || \"\").length > 0 ||\n            mutation.update ||\n            mutation.onQueryUpdated ||\n            mutation.removeOptimistic) {\n            var results_1 = [];\n            this.refetchQueries({\n                updateCache: function (cache) {\n                    if (!skipCache) {\n                        cacheWrites.forEach(function (write) { return cache.write(write); });\n                    }\n                    // If the mutation has some writes associated with it then we need to\n                    // apply those writes to the store by running this reducer again with\n                    // a write action.\n                    var update = mutation.update;\n                    // Determine whether result is a SingleExecutionResult,\n                    // or the final ExecutionPatchResult.\n                    var isFinalResult = !isExecutionPatchResult(result) ||\n                        (isExecutionPatchIncrementalResult(result) && !result.hasNext);\n                    if (update) {\n                        if (!skipCache) {\n                            // Re-read the ROOT_MUTATION data we just wrote into the cache\n                            // (the first cache.write call in the cacheWrites.forEach loop\n                            // above), so field read functions have a chance to run for\n                            // fields within mutation result objects.\n                            var diff = cache.diff({\n                                id: \"ROOT_MUTATION\",\n                                // The cache complains if passed a mutation where it expects a\n                                // query, so we transform mutations and subscriptions to queries\n                                // (only once, thanks to this.transformCache).\n                                query: _this.getDocumentInfo(mutation.document).asQuery,\n                                variables: mutation.variables,\n                                optimistic: false,\n                                returnPartialData: true,\n                            });\n                            if (diff.complete) {\n                                result = __assign(__assign({}, result), { data: diff.result });\n                                if (\"incremental\" in result) {\n                                    delete result.incremental;\n                                }\n                                if (\"hasNext\" in result) {\n                                    delete result.hasNext;\n                                }\n                            }\n                        }\n                        // If we've received the whole response,\n                        // either a SingleExecutionResult or the final ExecutionPatchResult,\n                        // call the update function.\n                        if (isFinalResult) {\n                            update(cache, result, {\n                                context: mutation.context,\n                                variables: mutation.variables,\n                            });\n                        }\n                    }\n                    // TODO Do this with cache.evict({ id: 'ROOT_MUTATION' }) but make it\n                    // shallow to allow rolling back optimistic evictions.\n                    if (!skipCache && !mutation.keepRootFields && isFinalResult) {\n                        cache.modify({\n                            id: \"ROOT_MUTATION\",\n                            fields: function (value, _a) {\n                                var fieldName = _a.fieldName, DELETE = _a.DELETE;\n                                return fieldName === \"__typename\" ? value : DELETE;\n                            },\n                        });\n                    }\n                },\n                include: mutation.refetchQueries,\n                // Write the final mutation.result to the root layer of the cache.\n                optimistic: false,\n                // Remove the corresponding optimistic layer at the same time as we\n                // write the final non-optimistic result.\n                removeOptimistic: mutation.removeOptimistic,\n                // Let the caller of client.mutate optionally determine the refetching\n                // behavior for watched queries after the mutation.update function runs.\n                // If no onQueryUpdated function was provided for this mutation, pass\n                // null instead of undefined to disable the default refetching behavior.\n                onQueryUpdated: mutation.onQueryUpdated || null,\n            }).forEach(function (result) { return results_1.push(result); });\n            if (mutation.awaitRefetchQueries || mutation.onQueryUpdated) {\n                // Returning a promise here makes the mutation await that promise, so we\n                // include results in that promise's work if awaitRefetchQueries or an\n                // onQueryUpdated function was specified.\n                return Promise.all(results_1).then(function () { return result; });\n            }\n        }\n        return Promise.resolve(result);\n    };\n    QueryManager.prototype.markMutationOptimistic = function (optimisticResponse, mutation) {\n        var _this = this;\n        var data = typeof optimisticResponse === \"function\" ?\n            optimisticResponse(mutation.variables, { IGNORE: IGNORE })\n            : optimisticResponse;\n        if (data === IGNORE) {\n            return false;\n        }\n        this.cache.recordOptimisticTransaction(function (cache) {\n            try {\n                _this.markMutationResult(__assign(__assign({}, mutation), { result: { data: data } }), cache);\n            }\n            catch (error) {\n                globalThis.__DEV__ !== false && invariant.error(error);\n            }\n        }, mutation.mutationId);\n        return true;\n    };\n    QueryManager.prototype.fetchQuery = function (queryId, options, networkStatus) {\n        return this.fetchConcastWithInfo(queryId, options, networkStatus).concast\n            .promise;\n    };\n    QueryManager.prototype.getQueryStore = function () {\n        var store = Object.create(null);\n        this.queries.forEach(function (info, queryId) {\n            store[queryId] = {\n                variables: info.variables,\n                networkStatus: info.networkStatus,\n                networkError: info.networkError,\n                graphQLErrors: info.graphQLErrors,\n            };\n        });\n        return store;\n    };\n    QueryManager.prototype.resetErrors = function (queryId) {\n        var queryInfo = this.queries.get(queryId);\n        if (queryInfo) {\n            queryInfo.networkError = undefined;\n            queryInfo.graphQLErrors = [];\n        }\n    };\n    QueryManager.prototype.transform = function (document) {\n        return this.documentTransform.transformDocument(document);\n    };\n    QueryManager.prototype.getDocumentInfo = function (document) {\n        var transformCache = this.transformCache;\n        if (!transformCache.has(document)) {\n            var cacheEntry = {\n                // TODO These three calls (hasClientExports, shouldForceResolvers, and\n                // usesNonreactiveDirective) are performing independent full traversals\n                // of the transformed document. We should consider merging these\n                // traversals into a single pass in the future, though the work is\n                // cached after the first time.\n                hasClientExports: hasClientExports(document),\n                hasForcedResolvers: this.localState.shouldForceResolvers(document),\n                hasNonreactiveDirective: hasDirectives([\"nonreactive\"], document),\n                clientQuery: this.localState.clientQuery(document),\n                serverQuery: removeDirectivesFromDocument([\n                    { name: \"client\", remove: true },\n                    { name: \"connection\" },\n                    { name: \"nonreactive\" },\n                ], document),\n                defaultVars: getDefaultValues(getOperationDefinition(document)),\n                // Transform any mutation or subscription operations to query operations\n                // so we can read/write them from/to the cache.\n                asQuery: __assign(__assign({}, document), { definitions: document.definitions.map(function (def) {\n                        if (def.kind === \"OperationDefinition\" &&\n                            def.operation !== \"query\") {\n                            return __assign(__assign({}, def), { operation: \"query\" });\n                        }\n                        return def;\n                    }) }),\n            };\n            transformCache.set(document, cacheEntry);\n        }\n        return transformCache.get(document);\n    };\n    QueryManager.prototype.getVariables = function (document, variables) {\n        return __assign(__assign({}, this.getDocumentInfo(document).defaultVars), variables);\n    };\n    QueryManager.prototype.watchQuery = function (options) {\n        var query = this.transform(options.query);\n        // assign variable default values if supplied\n        // NOTE: We don't modify options.query here with the transformed query to\n        // ensure observable.options.query is set to the raw untransformed query.\n        options = __assign(__assign({}, options), { variables: this.getVariables(query, options.variables) });\n        if (typeof options.notifyOnNetworkStatusChange === \"undefined\") {\n            options.notifyOnNetworkStatusChange = false;\n        }\n        var queryInfo = new QueryInfo(this);\n        var observable = new ObservableQuery({\n            queryManager: this,\n            queryInfo: queryInfo,\n            options: options,\n        });\n        observable[\"lastQuery\"] = query;\n        this.queries.set(observable.queryId, queryInfo);\n        // We give queryInfo the transformed query to ensure the first cache diff\n        // uses the transformed query instead of the raw query\n        queryInfo.init({\n            document: query,\n            observableQuery: observable,\n            variables: observable.variables,\n        });\n        return observable;\n    };\n    QueryManager.prototype.query = function (options, queryId) {\n        var _this = this;\n        if (queryId === void 0) { queryId = this.generateQueryId(); }\n        invariant(options.query, 28);\n        invariant(options.query.kind === \"Document\", 29);\n        invariant(!options.returnPartialData, 30);\n        invariant(!options.pollInterval, 31);\n        return this.fetchQuery(queryId, __assign(__assign({}, options), { query: this.transform(options.query) })).finally(function () { return _this.stopQuery(queryId); });\n    };\n    QueryManager.prototype.generateQueryId = function () {\n        return String(this.queryIdCounter++);\n    };\n    QueryManager.prototype.generateRequestId = function () {\n        return this.requestIdCounter++;\n    };\n    QueryManager.prototype.generateMutationId = function () {\n        return String(this.mutationIdCounter++);\n    };\n    QueryManager.prototype.stopQueryInStore = function (queryId) {\n        this.stopQueryInStoreNoBroadcast(queryId);\n        this.broadcastQueries();\n    };\n    QueryManager.prototype.stopQueryInStoreNoBroadcast = function (queryId) {\n        var queryInfo = this.queries.get(queryId);\n        if (queryInfo)\n            queryInfo.stop();\n    };\n    QueryManager.prototype.clearStore = function (options) {\n        if (options === void 0) { options = {\n            discardWatches: true,\n        }; }\n        // Before we have sent the reset action to the store, we can no longer\n        // rely on the results returned by in-flight requests since these may\n        // depend on values that previously existed in the data portion of the\n        // store. So, we cancel the promises and observers that we have issued\n        // so far and not yet resolved (in the case of queries).\n        this.cancelPendingFetches(newInvariantError(32));\n        this.queries.forEach(function (queryInfo) {\n            if (queryInfo.observableQuery) {\n                // Set loading to true so listeners don't trigger unless they want\n                // results with partial data.\n                queryInfo.networkStatus = NetworkStatus.loading;\n            }\n            else {\n                queryInfo.stop();\n            }\n        });\n        if (this.mutationStore) {\n            this.mutationStore = Object.create(null);\n        }\n        // begin removing data from the store\n        return this.cache.reset(options);\n    };\n    QueryManager.prototype.getObservableQueries = function (include) {\n        var _this = this;\n        if (include === void 0) { include = \"active\"; }\n        var queries = new Map();\n        var queryNamesAndDocs = new Map();\n        var legacyQueryOptions = new Set();\n        if (Array.isArray(include)) {\n            include.forEach(function (desc) {\n                if (typeof desc === \"string\") {\n                    queryNamesAndDocs.set(desc, false);\n                }\n                else if (isDocumentNode(desc)) {\n                    queryNamesAndDocs.set(_this.transform(desc), false);\n                }\n                else if (isNonNullObject(desc) && desc.query) {\n                    legacyQueryOptions.add(desc);\n                }\n            });\n        }\n        this.queries.forEach(function (_a, queryId) {\n            var oq = _a.observableQuery, document = _a.document;\n            if (oq) {\n                if (include === \"all\") {\n                    queries.set(queryId, oq);\n                    return;\n                }\n                var queryName = oq.queryName, fetchPolicy = oq.options.fetchPolicy;\n                if (fetchPolicy === \"standby\" ||\n                    (include === \"active\" && !oq.hasObservers())) {\n                    return;\n                }\n                if (include === \"active\" ||\n                    (queryName && queryNamesAndDocs.has(queryName)) ||\n                    (document && queryNamesAndDocs.has(document))) {\n                    queries.set(queryId, oq);\n                    if (queryName)\n                        queryNamesAndDocs.set(queryName, true);\n                    if (document)\n                        queryNamesAndDocs.set(document, true);\n                }\n            }\n        });\n        if (legacyQueryOptions.size) {\n            legacyQueryOptions.forEach(function (options) {\n                // We will be issuing a fresh network request for this query, so we\n                // pre-allocate a new query ID here, using a special prefix to enable\n                // cleaning up these temporary queries later, after fetching.\n                var queryId = makeUniqueId(\"legacyOneTimeQuery\");\n                var queryInfo = _this.getQuery(queryId).init({\n                    document: options.query,\n                    variables: options.variables,\n                });\n                var oq = new ObservableQuery({\n                    queryManager: _this,\n                    queryInfo: queryInfo,\n                    options: __assign(__assign({}, options), { fetchPolicy: \"network-only\" }),\n                });\n                invariant(oq.queryId === queryId);\n                queryInfo.setObservableQuery(oq);\n                queries.set(queryId, oq);\n            });\n        }\n        if (globalThis.__DEV__ !== false && queryNamesAndDocs.size) {\n            queryNamesAndDocs.forEach(function (included, nameOrDoc) {\n                if (!included) {\n                    globalThis.__DEV__ !== false && invariant.warn(typeof nameOrDoc === \"string\" ? 33 : 34, nameOrDoc);\n                }\n            });\n        }\n        return queries;\n    };\n    QueryManager.prototype.reFetchObservableQueries = function (includeStandby) {\n        var _this = this;\n        if (includeStandby === void 0) { includeStandby = false; }\n        var observableQueryPromises = [];\n        this.getObservableQueries(includeStandby ? \"all\" : \"active\").forEach(function (observableQuery, queryId) {\n            var fetchPolicy = observableQuery.options.fetchPolicy;\n            observableQuery.resetLastResults();\n            if (includeStandby ||\n                (fetchPolicy !== \"standby\" && fetchPolicy !== \"cache-only\")) {\n                observableQueryPromises.push(observableQuery.refetch());\n            }\n            _this.getQuery(queryId).setDiff(null);\n        });\n        this.broadcastQueries();\n        return Promise.all(observableQueryPromises);\n    };\n    QueryManager.prototype.setObservableQuery = function (observableQuery) {\n        this.getQuery(observableQuery.queryId).setObservableQuery(observableQuery);\n    };\n    QueryManager.prototype.startGraphQLSubscription = function (_a) {\n        var _this = this;\n        var query = _a.query, fetchPolicy = _a.fetchPolicy, _b = _a.errorPolicy, errorPolicy = _b === void 0 ? \"none\" : _b, variables = _a.variables, _c = _a.context, context = _c === void 0 ? {} : _c;\n        query = this.transform(query);\n        variables = this.getVariables(query, variables);\n        var makeObservable = function (variables) {\n            return _this.getObservableFromLink(query, context, variables).map(function (result) {\n                if (fetchPolicy !== \"no-cache\") {\n                    // the subscription interface should handle not sending us results we no longer subscribe to.\n                    // XXX I don't think we ever send in an object with errors, but we might in the future...\n                    if (shouldWriteResult(result, errorPolicy)) {\n                        _this.cache.write({\n                            query: query,\n                            result: result.data,\n                            dataId: \"ROOT_SUBSCRIPTION\",\n                            variables: variables,\n                        });\n                    }\n                    _this.broadcastQueries();\n                }\n                var hasErrors = graphQLResultHasError(result);\n                var hasProtocolErrors = graphQLResultHasProtocolErrors(result);\n                if (hasErrors || hasProtocolErrors) {\n                    var errors = {};\n                    if (hasErrors) {\n                        errors.graphQLErrors = result.errors;\n                    }\n                    if (hasProtocolErrors) {\n                        errors.protocolErrors = result.extensions[PROTOCOL_ERRORS_SYMBOL];\n                    }\n                    // `errorPolicy` is a mechanism for handling GraphQL errors, according\n                    // to our documentation, so we throw protocol errors regardless of the\n                    // set error policy.\n                    if (errorPolicy === \"none\" || hasProtocolErrors) {\n                        throw new ApolloError(errors);\n                    }\n                }\n                if (errorPolicy === \"ignore\") {\n                    delete result.errors;\n                }\n                return result;\n            });\n        };\n        if (this.getDocumentInfo(query).hasClientExports) {\n            var observablePromise_1 = this.localState\n                .addExportedVariables(query, variables, context)\n                .then(makeObservable);\n            return new Observable(function (observer) {\n                var sub = null;\n                observablePromise_1.then(function (observable) { return (sub = observable.subscribe(observer)); }, observer.error);\n                return function () { return sub && sub.unsubscribe(); };\n            });\n        }\n        return makeObservable(variables);\n    };\n    QueryManager.prototype.stopQuery = function (queryId) {\n        this.stopQueryNoBroadcast(queryId);\n        this.broadcastQueries();\n    };\n    QueryManager.prototype.stopQueryNoBroadcast = function (queryId) {\n        this.stopQueryInStoreNoBroadcast(queryId);\n        this.removeQuery(queryId);\n    };\n    QueryManager.prototype.removeQuery = function (queryId) {\n        // teardown all links\n        // Both `QueryManager.fetchRequest` and `QueryManager.query` create separate promises\n        // that each add their reject functions to fetchCancelFns.\n        // A query created with `QueryManager.query()` could trigger a `QueryManager.fetchRequest`.\n        // The same queryId could have two rejection fns for two promises\n        this.fetchCancelFns.delete(queryId);\n        if (this.queries.has(queryId)) {\n            this.getQuery(queryId).stop();\n            this.queries.delete(queryId);\n        }\n    };\n    QueryManager.prototype.broadcastQueries = function () {\n        if (this.onBroadcast)\n            this.onBroadcast();\n        this.queries.forEach(function (info) { return info.notify(); });\n    };\n    QueryManager.prototype.getLocalState = function () {\n        return this.localState;\n    };\n    QueryManager.prototype.getObservableFromLink = function (query, context, variables, \n    // Prefer context.queryDeduplication if specified.\n    deduplication) {\n        var _this = this;\n        var _a;\n        if (deduplication === void 0) { deduplication = (_a = context === null || context === void 0 ? void 0 : context.queryDeduplication) !== null && _a !== void 0 ? _a : this.queryDeduplication; }\n        var observable;\n        var _b = this.getDocumentInfo(query), serverQuery = _b.serverQuery, clientQuery = _b.clientQuery;\n        if (serverQuery) {\n            var _c = this, inFlightLinkObservables_1 = _c.inFlightLinkObservables, link = _c.link;\n            var operation = {\n                query: serverQuery,\n                variables: variables,\n                operationName: getOperationName(serverQuery) || void 0,\n                context: this.prepareContext(__assign(__assign({}, context), { forceFetch: !deduplication })),\n            };\n            context = operation.context;\n            if (deduplication) {\n                var printedServerQuery_1 = print(serverQuery);\n                var varJson_1 = canonicalStringify(variables);\n                var entry = inFlightLinkObservables_1.lookup(printedServerQuery_1, varJson_1);\n                observable = entry.observable;\n                if (!observable) {\n                    var concast = new Concast([\n                        execute(link, operation),\n                    ]);\n                    observable = entry.observable = concast;\n                    concast.beforeNext(function () {\n                        inFlightLinkObservables_1.remove(printedServerQuery_1, varJson_1);\n                    });\n                }\n            }\n            else {\n                observable = new Concast([\n                    execute(link, operation),\n                ]);\n            }\n        }\n        else {\n            observable = new Concast([Observable.of({ data: {} })]);\n            context = this.prepareContext(context);\n        }\n        if (clientQuery) {\n            observable = asyncMap(observable, function (result) {\n                return _this.localState.runResolvers({\n                    document: clientQuery,\n                    remoteResult: result,\n                    context: context,\n                    variables: variables,\n                });\n            });\n        }\n        return observable;\n    };\n    QueryManager.prototype.getResultsFromLink = function (queryInfo, cacheWriteBehavior, options) {\n        var requestId = (queryInfo.lastRequestId = this.generateRequestId());\n        // Performing transformForLink here gives this.cache a chance to fill in\n        // missing fragment definitions (for example) before sending this document\n        // through the link chain.\n        var linkDocument = this.cache.transformForLink(options.query);\n        return asyncMap(this.getObservableFromLink(linkDocument, options.context, options.variables), function (result) {\n            var graphQLErrors = getGraphQLErrorsFromResult(result);\n            var hasErrors = graphQLErrors.length > 0;\n            // If we interrupted this request by calling getResultsFromLink again\n            // with the same QueryInfo object, we ignore the old results.\n            if (requestId >= queryInfo.lastRequestId) {\n                if (hasErrors && options.errorPolicy === \"none\") {\n                    // Throwing here effectively calls observer.error.\n                    throw queryInfo.markError(new ApolloError({\n                        graphQLErrors: graphQLErrors,\n                    }));\n                }\n                // Use linkDocument rather than queryInfo.document so the\n                // operation/fragments used to write the result are the same as the\n                // ones used to obtain it from the link.\n                queryInfo.markResult(result, linkDocument, options, cacheWriteBehavior);\n                queryInfo.markReady();\n            }\n            var aqr = {\n                data: result.data,\n                loading: false,\n                networkStatus: NetworkStatus.ready,\n            };\n            if (hasErrors && options.errorPolicy !== \"ignore\") {\n                aqr.errors = graphQLErrors;\n                aqr.networkStatus = NetworkStatus.error;\n            }\n            return aqr;\n        }, function (networkError) {\n            var error = isApolloError(networkError) ? networkError : (new ApolloError({ networkError: networkError }));\n            // Avoid storing errors from older interrupted queries.\n            if (requestId >= queryInfo.lastRequestId) {\n                queryInfo.markError(error);\n            }\n            throw error;\n        });\n    };\n    QueryManager.prototype.fetchConcastWithInfo = function (queryId, options, \n    // The initial networkStatus for this fetch, most often\n    // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n    // or setVariables.\n    networkStatus, query) {\n        var _this = this;\n        if (networkStatus === void 0) { networkStatus = NetworkStatus.loading; }\n        if (query === void 0) { query = options.query; }\n        var variables = this.getVariables(query, options.variables);\n        var queryInfo = this.getQuery(queryId);\n        var defaults = this.defaultOptions.watchQuery;\n        var _a = options.fetchPolicy, fetchPolicy = _a === void 0 ? (defaults && defaults.fetchPolicy) || \"cache-first\" : _a, _b = options.errorPolicy, errorPolicy = _b === void 0 ? (defaults && defaults.errorPolicy) || \"none\" : _b, _c = options.returnPartialData, returnPartialData = _c === void 0 ? false : _c, _d = options.notifyOnNetworkStatusChange, notifyOnNetworkStatusChange = _d === void 0 ? false : _d, _e = options.context, context = _e === void 0 ? {} : _e;\n        var normalized = Object.assign({}, options, {\n            query: query,\n            variables: variables,\n            fetchPolicy: fetchPolicy,\n            errorPolicy: errorPolicy,\n            returnPartialData: returnPartialData,\n            notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,\n            context: context,\n        });\n        var fromVariables = function (variables) {\n            // Since normalized is always a fresh copy of options, it's safe to\n            // modify its properties here, rather than creating yet another new\n            // WatchQueryOptions object.\n            normalized.variables = variables;\n            var sourcesWithInfo = _this.fetchQueryByPolicy(queryInfo, normalized, networkStatus);\n            if (\n            // If we're in standby, postpone advancing options.fetchPolicy using\n            // applyNextFetchPolicy.\n            normalized.fetchPolicy !== \"standby\" &&\n                // The \"standby\" policy currently returns [] from fetchQueryByPolicy, so\n                // this is another way to detect when nothing was done/fetched.\n                sourcesWithInfo.sources.length > 0 &&\n                queryInfo.observableQuery) {\n                queryInfo.observableQuery[\"applyNextFetchPolicy\"](\"after-fetch\", options);\n            }\n            return sourcesWithInfo;\n        };\n        // This cancel function needs to be set before the concast is created,\n        // in case concast creation synchronously cancels the request.\n        var cleanupCancelFn = function () { return _this.fetchCancelFns.delete(queryId); };\n        this.fetchCancelFns.set(queryId, function (reason) {\n            cleanupCancelFn();\n            // This delay ensures the concast variable has been initialized.\n            setTimeout(function () { return concast.cancel(reason); });\n        });\n        var concast, containsDataFromLink;\n        // If the query has @export(as: ...) directives, then we need to\n        // process those directives asynchronously. When there are no\n        // @export directives (the common case), we deliberately avoid\n        // wrapping the result of this.fetchQueryByPolicy in a Promise,\n        // since the timing of result delivery is (unfortunately) important\n        // for backwards compatibility. TODO This code could be simpler if\n        // we deprecated and removed LocalState.\n        if (this.getDocumentInfo(normalized.query).hasClientExports) {\n            concast = new Concast(this.localState\n                .addExportedVariables(normalized.query, normalized.variables, normalized.context)\n                .then(fromVariables)\n                .then(function (sourcesWithInfo) { return sourcesWithInfo.sources; }));\n            // there is just no way we can synchronously get the *right* value here,\n            // so we will assume `true`, which is the behaviour before the bug fix in\n            // #10597. This means that bug is not fixed in that case, and is probably\n            // un-fixable with reasonable effort for the edge case of @export as\n            // directives.\n            containsDataFromLink = true;\n        }\n        else {\n            var sourcesWithInfo = fromVariables(normalized.variables);\n            containsDataFromLink = sourcesWithInfo.fromLink;\n            concast = new Concast(sourcesWithInfo.sources);\n        }\n        concast.promise.then(cleanupCancelFn, cleanupCancelFn);\n        return {\n            concast: concast,\n            fromLink: containsDataFromLink,\n        };\n    };\n    QueryManager.prototype.refetchQueries = function (_a) {\n        var _this = this;\n        var updateCache = _a.updateCache, include = _a.include, _b = _a.optimistic, optimistic = _b === void 0 ? false : _b, _c = _a.removeOptimistic, removeOptimistic = _c === void 0 ? optimistic ? makeUniqueId(\"refetchQueries\") : void 0 : _c, onQueryUpdated = _a.onQueryUpdated;\n        var includedQueriesById = new Map();\n        if (include) {\n            this.getObservableQueries(include).forEach(function (oq, queryId) {\n                includedQueriesById.set(queryId, {\n                    oq: oq,\n                    lastDiff: _this.getQuery(queryId).getDiff(),\n                });\n            });\n        }\n        var results = new Map();\n        if (updateCache) {\n            this.cache.batch({\n                update: updateCache,\n                // Since you can perform any combination of cache reads and/or writes in\n                // the cache.batch update function, its optimistic option can be either\n                // a boolean or a string, representing three distinct modes of\n                // operation:\n                //\n                // * false: read/write only the root layer\n                // * true: read/write the topmost layer\n                // * string: read/write a fresh optimistic layer with that ID string\n                //\n                // When typeof optimistic === \"string\", a new optimistic layer will be\n                // temporarily created within cache.batch with that string as its ID. If\n                // we then pass that same string as the removeOptimistic option, we can\n                // make cache.batch immediately remove the optimistic layer after\n                // running the updateCache function, triggering only one broadcast.\n                //\n                // However, the refetchQueries method accepts only true or false for its\n                // optimistic option (not string). We interpret true to mean a temporary\n                // optimistic layer should be created, to allow efficiently rolling back\n                // the effect of the updateCache function, which involves passing a\n                // string instead of true as the optimistic option to cache.batch, when\n                // refetchQueries receives optimistic: true.\n                //\n                // In other words, we are deliberately not supporting the use case of\n                // writing to an *existing* optimistic layer (using the refetchQueries\n                // updateCache function), since that would potentially interfere with\n                // other optimistic updates in progress. Instead, you can read/write\n                // only the root layer by passing optimistic: false to refetchQueries,\n                // or you can read/write a brand new optimistic layer that will be\n                // automatically removed by passing optimistic: true.\n                optimistic: (optimistic && removeOptimistic) || false,\n                // The removeOptimistic option can also be provided by itself, even if\n                // optimistic === false, to remove some previously-added optimistic\n                // layer safely and efficiently, like we do in markMutationResult.\n                //\n                // If an explicit removeOptimistic string is provided with optimistic:\n                // true, the removeOptimistic string will determine the ID of the\n                // temporary optimistic layer, in case that ever matters.\n                removeOptimistic: removeOptimistic,\n                onWatchUpdated: function (watch, diff, lastDiff) {\n                    var oq = watch.watcher instanceof QueryInfo && watch.watcher.observableQuery;\n                    if (oq) {\n                        if (onQueryUpdated) {\n                            // Since we're about to handle this query now, remove it from\n                            // includedQueriesById, in case it was added earlier because of\n                            // options.include.\n                            includedQueriesById.delete(oq.queryId);\n                            var result = onQueryUpdated(oq, diff, lastDiff);\n                            if (result === true) {\n                                // The onQueryUpdated function requested the default refetching\n                                // behavior by returning true.\n                                result = oq.refetch();\n                            }\n                            // Record the result in the results Map, as long as onQueryUpdated\n                            // did not return false to skip/ignore this result.\n                            if (result !== false) {\n                                results.set(oq, result);\n                            }\n                            // Allow the default cache broadcast to happen, except when\n                            // onQueryUpdated returns false.\n                            return result;\n                        }\n                        if (onQueryUpdated !== null) {\n                            // If we don't have an onQueryUpdated function, and onQueryUpdated\n                            // was not disabled by passing null, make sure this query is\n                            // \"included\" like any other options.include-specified query.\n                            includedQueriesById.set(oq.queryId, { oq: oq, lastDiff: lastDiff, diff: diff });\n                        }\n                    }\n                },\n            });\n        }\n        if (includedQueriesById.size) {\n            includedQueriesById.forEach(function (_a, queryId) {\n                var oq = _a.oq, lastDiff = _a.lastDiff, diff = _a.diff;\n                var result;\n                // If onQueryUpdated is provided, we want to use it for all included\n                // queries, even the QueryOptions ones.\n                if (onQueryUpdated) {\n                    if (!diff) {\n                        var info = oq[\"queryInfo\"];\n                        info.reset(); // Force info.getDiff() to read from cache.\n                        diff = info.getDiff();\n                    }\n                    result = onQueryUpdated(oq, diff, lastDiff);\n                }\n                // Otherwise, we fall back to refetching.\n                if (!onQueryUpdated || result === true) {\n                    result = oq.refetch();\n                }\n                if (result !== false) {\n                    results.set(oq, result);\n                }\n                if (queryId.indexOf(\"legacyOneTimeQuery\") >= 0) {\n                    _this.stopQueryNoBroadcast(queryId);\n                }\n            });\n        }\n        if (removeOptimistic) {\n            // In case no updateCache callback was provided (so cache.batch was not\n            // called above, and thus did not already remove the optimistic layer),\n            // remove it here. Since this is a no-op when the layer has already been\n            // removed, we do it even if we called cache.batch above, since it's\n            // possible this.cache is an instance of some ApolloCache subclass other\n            // than InMemoryCache, and does not fully support the removeOptimistic\n            // option for cache.batch.\n            this.cache.removeOptimistic(removeOptimistic);\n        }\n        return results;\n    };\n    QueryManager.prototype.fetchQueryByPolicy = function (queryInfo, _a, \n    // The initial networkStatus for this fetch, most often\n    // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n    // or setVariables.\n    networkStatus) {\n        var _this = this;\n        var query = _a.query, variables = _a.variables, fetchPolicy = _a.fetchPolicy, refetchWritePolicy = _a.refetchWritePolicy, errorPolicy = _a.errorPolicy, returnPartialData = _a.returnPartialData, context = _a.context, notifyOnNetworkStatusChange = _a.notifyOnNetworkStatusChange;\n        var oldNetworkStatus = queryInfo.networkStatus;\n        queryInfo.init({\n            document: query,\n            variables: variables,\n            networkStatus: networkStatus,\n        });\n        var readCache = function () { return queryInfo.getDiff(); };\n        var resultsFromCache = function (diff, networkStatus) {\n            if (networkStatus === void 0) { networkStatus = queryInfo.networkStatus || NetworkStatus.loading; }\n            var data = diff.result;\n            if (globalThis.__DEV__ !== false && !returnPartialData && !equal(data, {})) {\n                logMissingFieldErrors(diff.missing);\n            }\n            var fromData = function (data) {\n                return Observable.of(__assign({ data: data, loading: isNetworkRequestInFlight(networkStatus), networkStatus: networkStatus }, (diff.complete ? null : { partial: true })));\n            };\n            if (data && _this.getDocumentInfo(query).hasForcedResolvers) {\n                return _this.localState\n                    .runResolvers({\n                    document: query,\n                    remoteResult: { data: data },\n                    context: context,\n                    variables: variables,\n                    onlyRunForcedResolvers: true,\n                })\n                    .then(function (resolved) { return fromData(resolved.data || void 0); });\n            }\n            // Resolves https://github.com/apollographql/apollo-client/issues/10317.\n            // If errorPolicy is 'none' and notifyOnNetworkStatusChange is true,\n            // data was incorrectly returned from the cache on refetch:\n            // if diff.missing exists, we should not return cache data.\n            if (errorPolicy === \"none\" &&\n                networkStatus === NetworkStatus.refetch &&\n                Array.isArray(diff.missing)) {\n                return fromData(void 0);\n            }\n            return fromData(data);\n        };\n        var cacheWriteBehavior = fetchPolicy === \"no-cache\" ? 0 /* CacheWriteBehavior.FORBID */\n            // Watched queries must opt into overwriting existing data on refetch,\n            // by passing refetchWritePolicy: \"overwrite\" in their WatchQueryOptions.\n            : (networkStatus === NetworkStatus.refetch &&\n                refetchWritePolicy !== \"merge\") ?\n                1 /* CacheWriteBehavior.OVERWRITE */\n                : 2 /* CacheWriteBehavior.MERGE */;\n        var resultsFromLink = function () {\n            return _this.getResultsFromLink(queryInfo, cacheWriteBehavior, {\n                query: query,\n                variables: variables,\n                context: context,\n                fetchPolicy: fetchPolicy,\n                errorPolicy: errorPolicy,\n            });\n        };\n        var shouldNotify = notifyOnNetworkStatusChange &&\n            typeof oldNetworkStatus === \"number\" &&\n            oldNetworkStatus !== networkStatus &&\n            isNetworkRequestInFlight(networkStatus);\n        switch (fetchPolicy) {\n            default:\n            case \"cache-first\": {\n                var diff = readCache();\n                if (diff.complete) {\n                    return {\n                        fromLink: false,\n                        sources: [resultsFromCache(diff, queryInfo.markReady())],\n                    };\n                }\n                if (returnPartialData || shouldNotify) {\n                    return {\n                        fromLink: true,\n                        sources: [resultsFromCache(diff), resultsFromLink()],\n                    };\n                }\n                return { fromLink: true, sources: [resultsFromLink()] };\n            }\n            case \"cache-and-network\": {\n                var diff = readCache();\n                if (diff.complete || returnPartialData || shouldNotify) {\n                    return {\n                        fromLink: true,\n                        sources: [resultsFromCache(diff), resultsFromLink()],\n                    };\n                }\n                return { fromLink: true, sources: [resultsFromLink()] };\n            }\n            case \"cache-only\":\n                return {\n                    fromLink: false,\n                    sources: [resultsFromCache(readCache(), queryInfo.markReady())],\n                };\n            case \"network-only\":\n                if (shouldNotify) {\n                    return {\n                        fromLink: true,\n                        sources: [resultsFromCache(readCache()), resultsFromLink()],\n                    };\n                }\n                return { fromLink: true, sources: [resultsFromLink()] };\n            case \"no-cache\":\n                if (shouldNotify) {\n                    return {\n                        fromLink: true,\n                        // Note that queryInfo.getDiff() for no-cache queries does not call\n                        // cache.diff, but instead returns a { complete: false } stub result\n                        // when there is no queryInfo.diff already defined.\n                        sources: [resultsFromCache(queryInfo.getDiff()), resultsFromLink()],\n                    };\n                }\n                return { fromLink: true, sources: [resultsFromLink()] };\n            case \"standby\":\n                return { fromLink: false, sources: [] };\n        }\n    };\n    QueryManager.prototype.getQuery = function (queryId) {\n        if (queryId && !this.queries.has(queryId)) {\n            this.queries.set(queryId, new QueryInfo(this, queryId));\n        }\n        return this.queries.get(queryId);\n    };\n    QueryManager.prototype.prepareContext = function (context) {\n        if (context === void 0) { context = {}; }\n        var newContext = this.localState.prepareContext(context);\n        return __assign(__assign(__assign({}, this.defaultContext), newContext), { clientAwareness: this.clientAwareness });\n    };\n    return QueryManager;\n}());\nexport { QueryManager };\n", "import { __assign, __extends } from \"tslib\";\nimport { invariant } from \"../utilities/globals/index.js\";\nimport { equal } from \"@wry/equality\";\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\nimport { cloneDeep, compact, getOperationDefinition, Observable, iterateObserversSafely, fixObservableSubclass, getQueryDefinition, } from \"../utilities/index.js\";\nimport { equalByQuery } from \"./equalByQuery.js\";\nvar assign = Object.assign, hasOwnProperty = Object.hasOwnProperty;\nvar ObservableQuery = /** @class */ (function (_super) {\n    __extends(ObservableQuery, _super);\n    function ObservableQuery(_a) {\n        var queryManager = _a.queryManager, queryInfo = _a.queryInfo, options = _a.options;\n        var _this = _super.call(this, function (observer) {\n            // Zen Observable has its own error function, so in order to log correctly\n            // we need to provide a custom error callback.\n            try {\n                var subObserver = observer._subscription._observer;\n                if (subObserver && !subObserver.error) {\n                    subObserver.error = defaultSubscriptionObserverErrorCallback;\n                }\n            }\n            catch (_a) { }\n            var first = !_this.observers.size;\n            _this.observers.add(observer);\n            // Deliver most recent error or result.\n            var last = _this.last;\n            if (last && last.error) {\n                observer.error && observer.error(last.error);\n            }\n            else if (last && last.result) {\n                observer.next && observer.next(last.result);\n            }\n            // Initiate observation of this query if it hasn't been reported to\n            // the QueryManager yet.\n            if (first) {\n                // Blindly catching here prevents unhandled promise rejections,\n                // and is safe because the ObservableQuery handles this error with\n                // this.observer.error, so we're not just swallowing the error by\n                // ignoring it here.\n                _this.reobserve().catch(function () { });\n            }\n            return function () {\n                if (_this.observers.delete(observer) && !_this.observers.size) {\n                    _this.tearDownQuery();\n                }\n            };\n        }) || this;\n        _this.observers = new Set();\n        _this.subscriptions = new Set();\n        // related classes\n        _this.queryInfo = queryInfo;\n        _this.queryManager = queryManager;\n        // active state\n        _this.waitForOwnResult = skipCacheDataFor(options.fetchPolicy);\n        _this.isTornDown = false;\n        var _b = queryManager.defaultOptions.watchQuery, _c = _b === void 0 ? {} : _b, _d = _c.fetchPolicy, defaultFetchPolicy = _d === void 0 ? \"cache-first\" : _d;\n        var _e = options.fetchPolicy, fetchPolicy = _e === void 0 ? defaultFetchPolicy : _e, \n        // Make sure we don't store \"standby\" as the initialFetchPolicy.\n        _f = options.initialFetchPolicy, \n        // Make sure we don't store \"standby\" as the initialFetchPolicy.\n        initialFetchPolicy = _f === void 0 ? fetchPolicy === \"standby\" ? defaultFetchPolicy : (fetchPolicy) : _f;\n        _this.options = __assign(__assign({}, options), { \n            // Remember the initial options.fetchPolicy so we can revert back to this\n            // policy when variables change. This information can also be specified\n            // (or overridden) by providing options.initialFetchPolicy explicitly.\n            initialFetchPolicy: initialFetchPolicy, \n            // This ensures this.options.fetchPolicy always has a string value, in\n            // case options.fetchPolicy was not provided.\n            fetchPolicy: fetchPolicy });\n        _this.queryId = queryInfo.queryId || queryManager.generateQueryId();\n        var opDef = getOperationDefinition(_this.query);\n        _this.queryName = opDef && opDef.name && opDef.name.value;\n        return _this;\n    }\n    Object.defineProperty(ObservableQuery.prototype, \"query\", {\n        // The `query` computed property will always reflect the document transformed\n        // by the last run query. `this.options.query` will always reflect the raw\n        // untransformed query to ensure document transforms with runtime conditionals\n        // are run on the original document.\n        get: function () {\n            return this.lastQuery || this.options.query;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ObservableQuery.prototype, \"variables\", {\n        // Computed shorthand for this.options.variables, preserved for\n        // backwards compatibility.\n        /**\n         * An object containing the variables that were provided for the query.\n         */\n        get: function () {\n            return this.options.variables;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    ObservableQuery.prototype.result = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            // TODO: this code doesn’t actually make sense insofar as the observer\n            // will never exist in this.observers due how zen-observable wraps observables.\n            // https://github.com/zenparsing/zen-observable/blob/master/src/Observable.js#L169\n            var observer = {\n                next: function (result) {\n                    resolve(result);\n                    // Stop the query within the QueryManager if we can before\n                    // this function returns.\n                    //\n                    // We do this in order to prevent observers piling up within\n                    // the QueryManager. Notice that we only fully unsubscribe\n                    // from the subscription in a setTimeout(..., 0)  call. This call can\n                    // actually be handled by the browser at a much later time. If queries\n                    // are fired in the meantime, observers that should have been removed\n                    // from the QueryManager will continue to fire, causing an unnecessary\n                    // performance hit.\n                    _this.observers.delete(observer);\n                    if (!_this.observers.size) {\n                        _this.queryManager.removeQuery(_this.queryId);\n                    }\n                    setTimeout(function () {\n                        subscription.unsubscribe();\n                    }, 0);\n                },\n                error: reject,\n            };\n            var subscription = _this.subscribe(observer);\n        });\n    };\n    /** @internal */\n    ObservableQuery.prototype.resetDiff = function () {\n        this.queryInfo.resetDiff();\n    };\n    ObservableQuery.prototype.getCurrentResult = function (saveAsLastResult) {\n        if (saveAsLastResult === void 0) { saveAsLastResult = true; }\n        // Use the last result as long as the variables match this.variables.\n        var lastResult = this.getLastResult(true);\n        var networkStatus = this.queryInfo.networkStatus ||\n            (lastResult && lastResult.networkStatus) ||\n            NetworkStatus.ready;\n        var result = __assign(__assign({}, lastResult), { loading: isNetworkRequestInFlight(networkStatus), networkStatus: networkStatus });\n        var _a = this.options.fetchPolicy, fetchPolicy = _a === void 0 ? \"cache-first\" : _a;\n        if (\n        // These fetch policies should never deliver data from the cache, unless\n        // redelivering a previously delivered result.\n        skipCacheDataFor(fetchPolicy) ||\n            // If this.options.query has @client(always: true) fields, we cannot\n            // trust diff.result, since it was read from the cache without running\n            // local resolvers (and it's too late to run resolvers now, since we must\n            // return a result synchronously).\n            this.queryManager.getDocumentInfo(this.query).hasForcedResolvers) {\n            // Fall through.\n        }\n        else if (this.waitForOwnResult) {\n            // This would usually be a part of `QueryInfo.getDiff()`.\n            // which we skip in the waitForOwnResult case since we are not\n            // interested in the diff.\n            this.queryInfo[\"updateWatch\"]();\n        }\n        else {\n            var diff = this.queryInfo.getDiff();\n            if (diff.complete || this.options.returnPartialData) {\n                result.data = diff.result;\n            }\n            if (equal(result.data, {})) {\n                result.data = void 0;\n            }\n            if (diff.complete) {\n                // Similar to setting result.partial to false, but taking advantage of the\n                // falsiness of missing fields.\n                delete result.partial;\n                // If the diff is complete, and we're using a FetchPolicy that\n                // terminates after a complete cache read, we can assume the next result\n                // we receive will have NetworkStatus.ready and !loading.\n                if (diff.complete &&\n                    result.networkStatus === NetworkStatus.loading &&\n                    (fetchPolicy === \"cache-first\" || fetchPolicy === \"cache-only\")) {\n                    result.networkStatus = NetworkStatus.ready;\n                    result.loading = false;\n                }\n            }\n            else {\n                result.partial = true;\n            }\n            if (globalThis.__DEV__ !== false &&\n                !diff.complete &&\n                !this.options.partialRefetch &&\n                !result.loading &&\n                !result.data &&\n                !result.error) {\n                logMissingFieldErrors(diff.missing);\n            }\n        }\n        if (saveAsLastResult) {\n            this.updateLastResult(result);\n        }\n        return result;\n    };\n    // Compares newResult to the snapshot we took of this.lastResult when it was\n    // first received.\n    ObservableQuery.prototype.isDifferentFromLastResult = function (newResult, variables) {\n        if (!this.last) {\n            return true;\n        }\n        var resultIsDifferent = this.queryManager.getDocumentInfo(this.query).hasNonreactiveDirective ?\n            !equalByQuery(this.query, this.last.result, newResult, this.variables)\n            : !equal(this.last.result, newResult);\n        return (resultIsDifferent || (variables && !equal(this.last.variables, variables)));\n    };\n    ObservableQuery.prototype.getLast = function (key, variablesMustMatch) {\n        var last = this.last;\n        if (last &&\n            last[key] &&\n            (!variablesMustMatch || equal(last.variables, this.variables))) {\n            return last[key];\n        }\n    };\n    ObservableQuery.prototype.getLastResult = function (variablesMustMatch) {\n        return this.getLast(\"result\", variablesMustMatch);\n    };\n    ObservableQuery.prototype.getLastError = function (variablesMustMatch) {\n        return this.getLast(\"error\", variablesMustMatch);\n    };\n    ObservableQuery.prototype.resetLastResults = function () {\n        delete this.last;\n        this.isTornDown = false;\n    };\n    ObservableQuery.prototype.resetQueryStoreErrors = function () {\n        this.queryManager.resetErrors(this.queryId);\n    };\n    /**\n     * Update the variables of this observable query, and fetch the new results.\n     * This method should be preferred over `setVariables` in most use cases.\n     *\n     * @param variables - The new set of variables. If there are missing variables,\n     * the previous values of those variables will be used.\n     */\n    ObservableQuery.prototype.refetch = function (variables) {\n        var _a;\n        var reobserveOptions = {\n            // Always disable polling for refetches.\n            pollInterval: 0,\n        };\n        // Unless the provided fetchPolicy always consults the network\n        // (no-cache, network-only, or cache-and-network), override it with\n        // network-only to force the refetch for this fetchQuery call.\n        var fetchPolicy = this.options.fetchPolicy;\n        if (fetchPolicy === \"cache-and-network\") {\n            reobserveOptions.fetchPolicy = fetchPolicy;\n        }\n        else if (fetchPolicy === \"no-cache\") {\n            reobserveOptions.fetchPolicy = \"no-cache\";\n        }\n        else {\n            reobserveOptions.fetchPolicy = \"network-only\";\n        }\n        if (globalThis.__DEV__ !== false && variables && hasOwnProperty.call(variables, \"variables\")) {\n            var queryDef = getQueryDefinition(this.query);\n            var vars = queryDef.variableDefinitions;\n            if (!vars || !vars.some(function (v) { return v.variable.name.value === \"variables\"; })) {\n                globalThis.__DEV__ !== false && invariant.warn(\n                    20,\n                    variables,\n                    ((_a = queryDef.name) === null || _a === void 0 ? void 0 : _a.value) || queryDef\n                );\n            }\n        }\n        if (variables && !equal(this.options.variables, variables)) {\n            // Update the existing options with new variables\n            reobserveOptions.variables = this.options.variables = __assign(__assign({}, this.options.variables), variables);\n        }\n        this.queryInfo.resetLastWrite();\n        return this.reobserve(reobserveOptions, NetworkStatus.refetch);\n    };\n    /**\n     * A function that helps you fetch the next set of results for a [paginated list field](https://www.apollographql.com/docs/react/pagination/core-api/).\n     */\n    ObservableQuery.prototype.fetchMore = function (fetchMoreOptions) {\n        var _this = this;\n        var combinedOptions = __assign(__assign({}, (fetchMoreOptions.query ? fetchMoreOptions : (__assign(__assign(__assign(__assign({}, this.options), { query: this.options.query }), fetchMoreOptions), { variables: __assign(__assign({}, this.options.variables), fetchMoreOptions.variables) })))), { \n            // The fetchMore request goes immediately to the network and does\n            // not automatically write its result to the cache (hence no-cache\n            // instead of network-only), because we allow the caller of\n            // fetchMore to provide an updateQuery callback that determines how\n            // the data gets written to the cache.\n            fetchPolicy: \"no-cache\" });\n        combinedOptions.query = this.transformDocument(combinedOptions.query);\n        var qid = this.queryManager.generateQueryId();\n        // If a temporary query is passed to `fetchMore`, we don't want to store\n        // it as the last query result since it may be an optimized query for\n        // pagination. We will however run the transforms on the original document\n        // as well as the document passed in `fetchMoreOptions` to ensure the cache\n        // uses the most up-to-date document which may rely on runtime conditionals.\n        this.lastQuery =\n            fetchMoreOptions.query ?\n                this.transformDocument(this.options.query)\n                : combinedOptions.query;\n        // Simulate a loading result for the original query with\n        // result.networkStatus === NetworkStatus.fetchMore.\n        var queryInfo = this.queryInfo;\n        var originalNetworkStatus = queryInfo.networkStatus;\n        queryInfo.networkStatus = NetworkStatus.fetchMore;\n        if (combinedOptions.notifyOnNetworkStatusChange) {\n            this.observe();\n        }\n        var updatedQuerySet = new Set();\n        return this.queryManager\n            .fetchQuery(qid, combinedOptions, NetworkStatus.fetchMore)\n            .then(function (fetchMoreResult) {\n            _this.queryManager.removeQuery(qid);\n            if (queryInfo.networkStatus === NetworkStatus.fetchMore) {\n                queryInfo.networkStatus = originalNetworkStatus;\n            }\n            // Performing this cache update inside a cache.batch transaction ensures\n            // any affected cache.watch watchers are notified at most once about any\n            // updates. Most watchers will be using the QueryInfo class, which\n            // responds to notifications by calling reobserveCacheFirst to deliver\n            // fetchMore cache results back to this ObservableQuery.\n            _this.queryManager.cache.batch({\n                update: function (cache) {\n                    var updateQuery = fetchMoreOptions.updateQuery;\n                    if (updateQuery) {\n                        cache.updateQuery({\n                            query: _this.query,\n                            variables: _this.variables,\n                            returnPartialData: true,\n                            optimistic: false,\n                        }, function (previous) {\n                            return updateQuery(previous, {\n                                fetchMoreResult: fetchMoreResult.data,\n                                variables: combinedOptions.variables,\n                            });\n                        });\n                    }\n                    else {\n                        // If we're using a field policy instead of updateQuery, the only\n                        // thing we need to do is write the new data to the cache using\n                        // combinedOptions.variables (instead of this.variables, which is\n                        // what this.updateQuery uses, because it works by abusing the\n                        // original field value, keyed by the original variables).\n                        cache.writeQuery({\n                            query: combinedOptions.query,\n                            variables: combinedOptions.variables,\n                            data: fetchMoreResult.data,\n                        });\n                    }\n                },\n                onWatchUpdated: function (watch) {\n                    // Record the DocumentNode associated with any watched query whose\n                    // data were updated by the cache writes above.\n                    updatedQuerySet.add(watch.query);\n                },\n            });\n            return fetchMoreResult;\n        })\n            .finally(function () {\n            // In case the cache writes above did not generate a broadcast\n            // notification (which would have been intercepted by onWatchUpdated),\n            // likely because the written data were the same as what was already in\n            // the cache, we still want fetchMore to deliver its final loading:false\n            // result with the unchanged data.\n            if (!updatedQuerySet.has(_this.query)) {\n                reobserveCacheFirst(_this);\n            }\n        });\n    };\n    // XXX the subscription variables are separate from the query variables.\n    // if you want to update subscription variables, right now you have to do that separately,\n    // and you can only do it by stopping the subscription and then subscribing again with new variables.\n    /**\n     * A function that enables you to execute a [subscription](https://www.apollographql.com/docs/react/data/subscriptions/), usually to subscribe to specific fields that were included in the query.\n     *\n     * This function returns _another_ function that you can call to terminate the subscription.\n     */\n    ObservableQuery.prototype.subscribeToMore = function (options) {\n        var _this = this;\n        var subscription = this.queryManager\n            .startGraphQLSubscription({\n            query: options.document,\n            variables: options.variables,\n            context: options.context,\n        })\n            .subscribe({\n            next: function (subscriptionData) {\n                var updateQuery = options.updateQuery;\n                if (updateQuery) {\n                    _this.updateQuery(function (previous, _a) {\n                        var variables = _a.variables;\n                        return updateQuery(previous, {\n                            subscriptionData: subscriptionData,\n                            variables: variables,\n                        });\n                    });\n                }\n            },\n            error: function (err) {\n                if (options.onError) {\n                    options.onError(err);\n                    return;\n                }\n                globalThis.__DEV__ !== false && invariant.error(21, err);\n            },\n        });\n        this.subscriptions.add(subscription);\n        return function () {\n            if (_this.subscriptions.delete(subscription)) {\n                subscription.unsubscribe();\n            }\n        };\n    };\n    ObservableQuery.prototype.setOptions = function (newOptions) {\n        return this.reobserve(newOptions);\n    };\n    ObservableQuery.prototype.silentSetOptions = function (newOptions) {\n        var mergedOptions = compact(this.options, newOptions || {});\n        assign(this.options, mergedOptions);\n    };\n    /**\n     * Update the variables of this observable query, and fetch the new results\n     * if they've changed. Most users should prefer `refetch` instead of\n     * `setVariables` in order to to be properly notified of results even when\n     * they come from the cache.\n     *\n     * Note: the `next` callback will *not* fire if the variables have not changed\n     * or if the result is coming from cache.\n     *\n     * Note: the promise will return the old results immediately if the variables\n     * have not changed.\n     *\n     * Note: the promise will return null immediately if the query is not active\n     * (there are no subscribers).\n     *\n     * @param variables - The new set of variables. If there are missing variables,\n     * the previous values of those variables will be used.\n     */\n    ObservableQuery.prototype.setVariables = function (variables) {\n        if (equal(this.variables, variables)) {\n            // If we have no observers, then we don't actually want to make a network\n            // request. As soon as someone observes the query, the request will kick\n            // off. For now, we just store any changes. (See #1077)\n            return this.observers.size ? this.result() : Promise.resolve();\n        }\n        this.options.variables = variables;\n        // See comment above\n        if (!this.observers.size) {\n            return Promise.resolve();\n        }\n        return this.reobserve({\n            // Reset options.fetchPolicy to its original value.\n            fetchPolicy: this.options.initialFetchPolicy,\n            variables: variables,\n        }, NetworkStatus.setVariables);\n    };\n    /**\n     * A function that enables you to update the query's cached result without executing a followup GraphQL operation.\n     *\n     * See [using updateQuery and updateFragment](https://www.apollographql.com/docs/react/caching/cache-interaction/#using-updatequery-and-updatefragment) for additional information.\n     */\n    ObservableQuery.prototype.updateQuery = function (mapFn) {\n        var queryManager = this.queryManager;\n        var result = queryManager.cache.diff({\n            query: this.options.query,\n            variables: this.variables,\n            returnPartialData: true,\n            optimistic: false,\n        }).result;\n        var newResult = mapFn(result, {\n            variables: this.variables,\n        });\n        if (newResult) {\n            queryManager.cache.writeQuery({\n                query: this.options.query,\n                data: newResult,\n                variables: this.variables,\n            });\n            queryManager.broadcastQueries();\n        }\n    };\n    /**\n     * A function that instructs the query to begin re-executing at a specified interval (in milliseconds).\n     */\n    ObservableQuery.prototype.startPolling = function (pollInterval) {\n        this.options.pollInterval = pollInterval;\n        this.updatePolling();\n    };\n    /**\n     * A function that instructs the query to stop polling after a previous call to `startPolling`.\n     */\n    ObservableQuery.prototype.stopPolling = function () {\n        this.options.pollInterval = 0;\n        this.updatePolling();\n    };\n    // Update options.fetchPolicy according to options.nextFetchPolicy.\n    ObservableQuery.prototype.applyNextFetchPolicy = function (reason, \n    // It's possible to use this method to apply options.nextFetchPolicy to\n    // options.fetchPolicy even if options !== this.options, though that happens\n    // most often when the options are temporary, used for only one request and\n    // then thrown away, so nextFetchPolicy may not end up mattering.\n    options) {\n        if (options.nextFetchPolicy) {\n            var _a = options.fetchPolicy, fetchPolicy = _a === void 0 ? \"cache-first\" : _a, _b = options.initialFetchPolicy, initialFetchPolicy = _b === void 0 ? fetchPolicy : _b;\n            if (fetchPolicy === \"standby\") {\n                // Do nothing, leaving options.fetchPolicy unchanged.\n            }\n            else if (typeof options.nextFetchPolicy === \"function\") {\n                // When someone chooses \"cache-and-network\" or \"network-only\" as their\n                // initial FetchPolicy, they often do not want future cache updates to\n                // trigger unconditional network requests, which is what repeatedly\n                // applying the \"cache-and-network\" or \"network-only\" policies would\n                // seem to imply. Instead, when the cache reports an update after the\n                // initial network request, it may be desirable for subsequent network\n                // requests to be triggered only if the cache result is incomplete. To\n                // that end, the options.nextFetchPolicy option provides an easy way to\n                // update options.fetchPolicy after the initial network request, without\n                // having to call observableQuery.setOptions.\n                options.fetchPolicy = options.nextFetchPolicy(fetchPolicy, {\n                    reason: reason,\n                    options: options,\n                    observable: this,\n                    initialFetchPolicy: initialFetchPolicy,\n                });\n            }\n            else if (reason === \"variables-changed\") {\n                options.fetchPolicy = initialFetchPolicy;\n            }\n            else {\n                options.fetchPolicy = options.nextFetchPolicy;\n            }\n        }\n        return options.fetchPolicy;\n    };\n    ObservableQuery.prototype.fetch = function (options, newNetworkStatus, query) {\n        // TODO Make sure we update the networkStatus (and infer fetchVariables)\n        // before actually committing to the fetch.\n        this.queryManager.setObservableQuery(this);\n        return this.queryManager[\"fetchConcastWithInfo\"](this.queryId, options, newNetworkStatus, query);\n    };\n    // Turns polling on or off based on this.options.pollInterval.\n    ObservableQuery.prototype.updatePolling = function () {\n        var _this = this;\n        // Avoid polling in SSR mode\n        if (this.queryManager.ssrMode) {\n            return;\n        }\n        var _a = this, pollingInfo = _a.pollingInfo, pollInterval = _a.options.pollInterval;\n        if (!pollInterval) {\n            if (pollingInfo) {\n                clearTimeout(pollingInfo.timeout);\n                delete this.pollingInfo;\n            }\n            return;\n        }\n        if (pollingInfo && pollingInfo.interval === pollInterval) {\n            return;\n        }\n        invariant(pollInterval, 22);\n        var info = pollingInfo || (this.pollingInfo = {});\n        info.interval = pollInterval;\n        var maybeFetch = function () {\n            var _a, _b;\n            if (_this.pollingInfo) {\n                if (!isNetworkRequestInFlight(_this.queryInfo.networkStatus) &&\n                    !((_b = (_a = _this.options).skipPollAttempt) === null || _b === void 0 ? void 0 : _b.call(_a))) {\n                    _this.reobserve({\n                        // Most fetchPolicy options don't make sense to use in a polling context, as\n                        // users wouldn't want to be polling the cache directly. However, network-only and\n                        // no-cache are both useful for when the user wants to control whether or not the\n                        // polled results are written to the cache.\n                        fetchPolicy: _this.options.initialFetchPolicy === \"no-cache\" ?\n                            \"no-cache\"\n                            : \"network-only\",\n                    }, NetworkStatus.poll).then(poll, poll);\n                }\n                else {\n                    poll();\n                }\n            }\n        };\n        var poll = function () {\n            var info = _this.pollingInfo;\n            if (info) {\n                clearTimeout(info.timeout);\n                info.timeout = setTimeout(maybeFetch, info.interval);\n            }\n        };\n        poll();\n    };\n    ObservableQuery.prototype.updateLastResult = function (newResult, variables) {\n        if (variables === void 0) { variables = this.variables; }\n        var error = this.getLastError();\n        // Preserve this.last.error unless the variables have changed.\n        if (error && this.last && !equal(variables, this.last.variables)) {\n            error = void 0;\n        }\n        return (this.last = __assign({ result: this.queryManager.assumeImmutableResults ?\n                newResult\n                : cloneDeep(newResult), variables: variables }, (error ? { error: error } : null)));\n    };\n    ObservableQuery.prototype.reobserveAsConcast = function (newOptions, newNetworkStatus) {\n        var _this = this;\n        this.isTornDown = false;\n        var useDisposableConcast = \n        // Refetching uses a disposable Concast to allow refetches using different\n        // options/variables, without permanently altering the options of the\n        // original ObservableQuery.\n        newNetworkStatus === NetworkStatus.refetch ||\n            // The fetchMore method does not actually call the reobserve method, but,\n            // if it did, it would definitely use a disposable Concast.\n            newNetworkStatus === NetworkStatus.fetchMore ||\n            // Polling uses a disposable Concast so the polling options (which force\n            // fetchPolicy to be \"network-only\" or \"no-cache\") won't override the original options.\n            newNetworkStatus === NetworkStatus.poll;\n        // Save the old variables, since Object.assign may modify them below.\n        var oldVariables = this.options.variables;\n        var oldFetchPolicy = this.options.fetchPolicy;\n        var mergedOptions = compact(this.options, newOptions || {});\n        var options = useDisposableConcast ?\n            // Disposable Concast fetches receive a shallow copy of this.options\n            // (merged with newOptions), leaving this.options unmodified.\n            mergedOptions\n            : assign(this.options, mergedOptions);\n        // Don't update options.query with the transformed query to avoid\n        // overwriting this.options.query when we aren't using a disposable concast.\n        // We want to ensure we can re-run the custom document transforms the next\n        // time a request is made against the original query.\n        var query = this.transformDocument(options.query);\n        this.lastQuery = query;\n        if (!useDisposableConcast) {\n            // We can skip calling updatePolling if we're not changing this.options.\n            this.updatePolling();\n            // Reset options.fetchPolicy to its original value when variables change,\n            // unless a new fetchPolicy was provided by newOptions.\n            if (newOptions &&\n                newOptions.variables &&\n                !equal(newOptions.variables, oldVariables) &&\n                // Don't mess with the fetchPolicy if it's currently \"standby\".\n                options.fetchPolicy !== \"standby\" &&\n                // If we're changing the fetchPolicy anyway, don't try to change it here\n                // using applyNextFetchPolicy. The explicit options.fetchPolicy wins.\n                options.fetchPolicy === oldFetchPolicy) {\n                this.applyNextFetchPolicy(\"variables-changed\", options);\n                if (newNetworkStatus === void 0) {\n                    newNetworkStatus = NetworkStatus.setVariables;\n                }\n            }\n        }\n        this.waitForOwnResult && (this.waitForOwnResult = skipCacheDataFor(options.fetchPolicy));\n        var finishWaitingForOwnResult = function () {\n            if (_this.concast === concast) {\n                _this.waitForOwnResult = false;\n            }\n        };\n        var variables = options.variables && __assign({}, options.variables);\n        var _a = this.fetch(options, newNetworkStatus, query), concast = _a.concast, fromLink = _a.fromLink;\n        var observer = {\n            next: function (result) {\n                if (equal(_this.variables, variables)) {\n                    finishWaitingForOwnResult();\n                    _this.reportResult(result, variables);\n                }\n            },\n            error: function (error) {\n                if (equal(_this.variables, variables)) {\n                    finishWaitingForOwnResult();\n                    _this.reportError(error, variables);\n                }\n            },\n        };\n        if (!useDisposableConcast && (fromLink || !this.concast)) {\n            // We use the {add,remove}Observer methods directly to avoid wrapping\n            // observer with an unnecessary SubscriptionObserver object.\n            if (this.concast && this.observer) {\n                this.concast.removeObserver(this.observer);\n            }\n            this.concast = concast;\n            this.observer = observer;\n        }\n        concast.addObserver(observer);\n        return concast;\n    };\n    ObservableQuery.prototype.reobserve = function (newOptions, newNetworkStatus) {\n        return this.reobserveAsConcast(newOptions, newNetworkStatus)\n            .promise;\n    };\n    ObservableQuery.prototype.resubscribeAfterError = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        // If `lastError` is set in the current when the subscription is re-created,\n        // the subscription will immediately receive the error, which will\n        // cause it to terminate again. To avoid this, we first clear\n        // the last error/result from the `observableQuery` before re-starting\n        // the subscription, and restore the last value afterwards so that the\n        // subscription has a chance to stay open.\n        var last = this.last;\n        this.resetLastResults();\n        var subscription = this.subscribe.apply(this, args);\n        this.last = last;\n        return subscription;\n    };\n    // (Re)deliver the current result to this.observers without applying fetch\n    // policies or making network requests.\n    ObservableQuery.prototype.observe = function () {\n        this.reportResult(\n        // Passing false is important so that this.getCurrentResult doesn't\n        // save the fetchMore result as this.lastResult, causing it to be\n        // ignored due to the this.isDifferentFromLastResult check in\n        // this.reportResult.\n        this.getCurrentResult(false), this.variables);\n    };\n    ObservableQuery.prototype.reportResult = function (result, variables) {\n        var lastError = this.getLastError();\n        var isDifferent = this.isDifferentFromLastResult(result, variables);\n        // Update the last result even when isDifferentFromLastResult returns false,\n        // because the query may be using the @nonreactive directive, and we want to\n        // save the the latest version of any nonreactive subtrees (in case\n        // getCurrentResult is called), even though we skip broadcasting changes.\n        if (lastError || !result.partial || this.options.returnPartialData) {\n            this.updateLastResult(result, variables);\n        }\n        if (lastError || isDifferent) {\n            iterateObserversSafely(this.observers, \"next\", result);\n        }\n    };\n    ObservableQuery.prototype.reportError = function (error, variables) {\n        // Since we don't get the current result on errors, only the error, we\n        // must mirror the updates that occur in QueryStore.markQueryError here\n        var errorResult = __assign(__assign({}, this.getLastResult()), { error: error, errors: error.graphQLErrors, networkStatus: NetworkStatus.error, loading: false });\n        this.updateLastResult(errorResult, variables);\n        iterateObserversSafely(this.observers, \"error\", (this.last.error = error));\n    };\n    ObservableQuery.prototype.hasObservers = function () {\n        return this.observers.size > 0;\n    };\n    ObservableQuery.prototype.tearDownQuery = function () {\n        if (this.isTornDown)\n            return;\n        if (this.concast && this.observer) {\n            this.concast.removeObserver(this.observer);\n            delete this.concast;\n            delete this.observer;\n        }\n        this.stopPolling();\n        // stop all active GraphQL subscriptions\n        this.subscriptions.forEach(function (sub) { return sub.unsubscribe(); });\n        this.subscriptions.clear();\n        this.queryManager.stopQuery(this.queryId);\n        this.observers.clear();\n        this.isTornDown = true;\n    };\n    ObservableQuery.prototype.transformDocument = function (document) {\n        return this.queryManager.transform(document);\n    };\n    return ObservableQuery;\n}(Observable));\nexport { ObservableQuery };\n// Necessary because the ObservableQuery constructor has a different\n// signature than the Observable constructor.\nfixObservableSubclass(ObservableQuery);\n// Reobserve with fetchPolicy effectively set to \"cache-first\", triggering\n// delivery of any new data from the cache, possibly falling back to the network\n// if any cache data are missing. This allows _complete_ cache results to be\n// delivered without also kicking off unnecessary network requests when\n// this.options.fetchPolicy is \"cache-and-network\" or \"network-only\". When\n// this.options.fetchPolicy is any other policy (\"cache-first\", \"cache-only\",\n// \"standby\", or \"no-cache\"), we call this.reobserve() as usual.\nexport function reobserveCacheFirst(obsQuery) {\n    var _a = obsQuery.options, fetchPolicy = _a.fetchPolicy, nextFetchPolicy = _a.nextFetchPolicy;\n    if (fetchPolicy === \"cache-and-network\" || fetchPolicy === \"network-only\") {\n        return obsQuery.reobserve({\n            fetchPolicy: \"cache-first\",\n            // Use a temporary nextFetchPolicy function that replaces itself with the\n            // previous nextFetchPolicy value and returns the original fetchPolicy.\n            nextFetchPolicy: function (currentFetchPolicy, context) {\n                // Replace this nextFetchPolicy function in the options object with the\n                // original this.options.nextFetchPolicy value.\n                this.nextFetchPolicy = nextFetchPolicy;\n                // If the original nextFetchPolicy value was a function, give it a\n                // chance to decide what happens here.\n                if (typeof this.nextFetchPolicy === \"function\") {\n                    return this.nextFetchPolicy(currentFetchPolicy, context);\n                }\n                // Otherwise go back to the original this.options.fetchPolicy.\n                return fetchPolicy;\n            },\n        });\n    }\n    return obsQuery.reobserve();\n}\nfunction defaultSubscriptionObserverErrorCallback(error) {\n    globalThis.__DEV__ !== false && invariant.error(23, error.message, error.stack);\n}\nexport function logMissingFieldErrors(missing) {\n    if (globalThis.__DEV__ !== false && missing) {\n        globalThis.__DEV__ !== false && invariant.debug(24, missing);\n    }\n}\nfunction skipCacheDataFor(fetchPolicy /* `undefined` would mean `\"cache-first\"` */) {\n    return (fetchPolicy === \"network-only\" ||\n        fetchPolicy === \"no-cache\" ||\n        fetchPolicy === \"standby\");\n}\n", "import { __rest } from \"tslib\";\nimport equal from \"@wry/equality\";\nimport { createFragmentMap, getFragmentDefinitions, getFragmentFromSelection, getMainDefinition, isField, resultKeyNameFromField, shouldInclude, } from \"../utilities/index.js\";\n// Returns true if aResult and bResult are deeply equal according to the fields\n// selected by the given query, ignoring any fields marked as @nonreactive.\nexport function equalByQuery(query, _a, _b, variables) {\n    var aData = _a.data, aRest = __rest(_a, [\"data\"]);\n    var bData = _b.data, bRest = __rest(_b, [\"data\"]);\n    return (equal(aRest, bRest) &&\n        equalBySelectionSet(getMainDefinition(query).selectionSet, aData, bData, {\n            fragmentMap: createFragmentMap(getFragmentDefinitions(query)),\n            variables: variables,\n        }));\n}\nfunction equalBySelectionSet(selectionSet, aResult, bResult, context) {\n    if (aResult === bResult) {\n        return true;\n    }\n    var seenSelections = new Set();\n    // Returning true from this Array.prototype.every callback function skips the\n    // current field/subtree. Returning false aborts the entire traversal\n    // immediately, causing equalBySelectionSet to return false.\n    return selectionSet.selections.every(function (selection) {\n        // Avoid re-processing the same selection at the same level of recursion, in\n        // case the same field gets included via multiple indirect fragment spreads.\n        if (seenSelections.has(selection))\n            return true;\n        seenSelections.add(selection);\n        // Ignore @skip(if: true) and @include(if: false) fields.\n        if (!shouldInclude(selection, context.variables))\n            return true;\n        // If the field or (named) fragment spread has a @nonreactive directive on\n        // it, we don't care if it's different, so we pretend it's the same.\n        if (selectionHasNonreactiveDirective(selection))\n            return true;\n        if (isField(selection)) {\n            var resultKey = resultKeyNameFromField(selection);\n            var aResultChild = aResult && aResult[resultKey];\n            var bResultChild = bResult && bResult[resultKey];\n            var childSelectionSet = selection.selectionSet;\n            if (!childSelectionSet) {\n                // These are scalar values, so we can compare them with deep equal\n                // without redoing the main recursive work.\n                return equal(aResultChild, bResultChild);\n            }\n            var aChildIsArray = Array.isArray(aResultChild);\n            var bChildIsArray = Array.isArray(bResultChild);\n            if (aChildIsArray !== bChildIsArray)\n                return false;\n            if (aChildIsArray && bChildIsArray) {\n                var length_1 = aResultChild.length;\n                if (bResultChild.length !== length_1) {\n                    return false;\n                }\n                for (var i = 0; i < length_1; ++i) {\n                    if (!equalBySelectionSet(childSelectionSet, aResultChild[i], bResultChild[i], context)) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n            return equalBySelectionSet(childSelectionSet, aResultChild, bResultChild, context);\n        }\n        else {\n            var fragment = getFragmentFromSelection(selection, context.fragmentMap);\n            if (fragment) {\n                // The fragment might === selection if it's an inline fragment, but\n                // could be !== if it's a named fragment ...spread.\n                if (selectionHasNonreactiveDirective(fragment))\n                    return true;\n                return equalBySelectionSet(fragment.selectionSet, \n                // Notice that we reuse the same aResult and bResult values here,\n                // since the fragment ...spread does not specify a field name, but\n                // consists of multiple fields (within the fragment's selection set)\n                // that should be applied to the current result value(s).\n                aResult, bResult, context);\n            }\n        }\n    });\n}\nfunction selectionHasNonreactiveDirective(selection) {\n    return (!!selection.directives && selection.directives.some(directiveIsNonreactive));\n}\nfunction directiveIsNonreactive(dir) {\n    return dir.name.value === \"nonreactive\";\n}\n", "import { __assign, __awaiter, __generator } from \"tslib\";\nimport { invariant } from \"../utilities/globals/index.js\";\nimport { visit, BREAK, isSelectionNode } from \"graphql\";\nimport { argumentsObjectFromField, buildQueryFromSelectionSet, createFragmentMap, getFragmentDefinitions, getMainDefinition, hasDirectives, isField, isInlineFragment, mergeDeep, mergeDeepArray, removeClientSetsFromDocument, resultKeyNameFromField, shouldInclude, } from \"../utilities/index.js\";\nimport { cacheSlot } from \"../cache/index.js\";\nvar LocalState = /** @class */ (function () {\n    function LocalState(_a) {\n        var cache = _a.cache, client = _a.client, resolvers = _a.resolvers, fragmentMatcher = _a.fragmentMatcher;\n        this.selectionsToResolveCache = new WeakMap();\n        this.cache = cache;\n        if (client) {\n            this.client = client;\n        }\n        if (resolvers) {\n            this.addResolvers(resolvers);\n        }\n        if (fragmentMatcher) {\n            this.setFragmentMatcher(fragmentMatcher);\n        }\n    }\n    LocalState.prototype.addResolvers = function (resolvers) {\n        var _this = this;\n        this.resolvers = this.resolvers || {};\n        if (Array.isArray(resolvers)) {\n            resolvers.forEach(function (resolverGroup) {\n                _this.resolvers = mergeDeep(_this.resolvers, resolverGroup);\n            });\n        }\n        else {\n            this.resolvers = mergeDeep(this.resolvers, resolvers);\n        }\n    };\n    LocalState.prototype.setResolvers = function (resolvers) {\n        this.resolvers = {};\n        this.addResolvers(resolvers);\n    };\n    LocalState.prototype.getResolvers = function () {\n        return this.resolvers || {};\n    };\n    // Run local client resolvers against the incoming query and remote data.\n    // Locally resolved field values are merged with the incoming remote data,\n    // and returned. Note that locally resolved fields will overwrite\n    // remote data using the same field name.\n    LocalState.prototype.runResolvers = function (_a) {\n        var document = _a.document, remoteResult = _a.remoteResult, context = _a.context, variables = _a.variables, _b = _a.onlyRunForcedResolvers, onlyRunForcedResolvers = _b === void 0 ? false : _b;\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_c) {\n                if (document) {\n                    return [2 /*return*/, this.resolveDocument(document, remoteResult.data, context, variables, this.fragmentMatcher, onlyRunForcedResolvers).then(function (localResult) { return (__assign(__assign({}, remoteResult), { data: localResult.result })); })];\n                }\n                return [2 /*return*/, remoteResult];\n            });\n        });\n    };\n    LocalState.prototype.setFragmentMatcher = function (fragmentMatcher) {\n        this.fragmentMatcher = fragmentMatcher;\n    };\n    LocalState.prototype.getFragmentMatcher = function () {\n        return this.fragmentMatcher;\n    };\n    // Client queries contain everything in the incoming document (if a @client\n    // directive is found).\n    LocalState.prototype.clientQuery = function (document) {\n        if (hasDirectives([\"client\"], document)) {\n            if (this.resolvers) {\n                return document;\n            }\n        }\n        return null;\n    };\n    // Server queries are stripped of all @client based selection sets.\n    LocalState.prototype.serverQuery = function (document) {\n        return removeClientSetsFromDocument(document);\n    };\n    LocalState.prototype.prepareContext = function (context) {\n        var cache = this.cache;\n        return __assign(__assign({}, context), { cache: cache, \n            // Getting an entry's cache key is useful for local state resolvers.\n            getCacheKey: function (obj) {\n                return cache.identify(obj);\n            } });\n    };\n    // To support `@client @export(as: \"someVar\")` syntax, we'll first resolve\n    // @client @export fields locally, then pass the resolved values back to be\n    // used alongside the original operation variables.\n    LocalState.prototype.addExportedVariables = function (document, variables, context) {\n        if (variables === void 0) { variables = {}; }\n        if (context === void 0) { context = {}; }\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                if (document) {\n                    return [2 /*return*/, this.resolveDocument(document, this.buildRootValueFromCache(document, variables) || {}, this.prepareContext(context), variables).then(function (data) { return (__assign(__assign({}, variables), data.exportedVariables)); })];\n                }\n                return [2 /*return*/, __assign({}, variables)];\n            });\n        });\n    };\n    LocalState.prototype.shouldForceResolvers = function (document) {\n        var forceResolvers = false;\n        visit(document, {\n            Directive: {\n                enter: function (node) {\n                    if (node.name.value === \"client\" && node.arguments) {\n                        forceResolvers = node.arguments.some(function (arg) {\n                            return arg.name.value === \"always\" &&\n                                arg.value.kind === \"BooleanValue\" &&\n                                arg.value.value === true;\n                        });\n                        if (forceResolvers) {\n                            return BREAK;\n                        }\n                    }\n                },\n            },\n        });\n        return forceResolvers;\n    };\n    // Query the cache and return matching data.\n    LocalState.prototype.buildRootValueFromCache = function (document, variables) {\n        return this.cache.diff({\n            query: buildQueryFromSelectionSet(document),\n            variables: variables,\n            returnPartialData: true,\n            optimistic: false,\n        }).result;\n    };\n    LocalState.prototype.resolveDocument = function (document, rootValue, context, variables, fragmentMatcher, onlyRunForcedResolvers) {\n        if (context === void 0) { context = {}; }\n        if (variables === void 0) { variables = {}; }\n        if (fragmentMatcher === void 0) { fragmentMatcher = function () { return true; }; }\n        if (onlyRunForcedResolvers === void 0) { onlyRunForcedResolvers = false; }\n        return __awaiter(this, void 0, void 0, function () {\n            var mainDefinition, fragments, fragmentMap, selectionsToResolve, definitionOperation, defaultOperationType, _a, cache, client, execContext, isClientFieldDescendant;\n            return __generator(this, function (_b) {\n                mainDefinition = getMainDefinition(document);\n                fragments = getFragmentDefinitions(document);\n                fragmentMap = createFragmentMap(fragments);\n                selectionsToResolve = this.collectSelectionsToResolve(mainDefinition, fragmentMap);\n                definitionOperation = mainDefinition.operation;\n                defaultOperationType = definitionOperation ?\n                    definitionOperation.charAt(0).toUpperCase() +\n                        definitionOperation.slice(1)\n                    : \"Query\";\n                _a = this, cache = _a.cache, client = _a.client;\n                execContext = {\n                    fragmentMap: fragmentMap,\n                    context: __assign(__assign({}, context), { cache: cache, client: client }),\n                    variables: variables,\n                    fragmentMatcher: fragmentMatcher,\n                    defaultOperationType: defaultOperationType,\n                    exportedVariables: {},\n                    selectionsToResolve: selectionsToResolve,\n                    onlyRunForcedResolvers: onlyRunForcedResolvers,\n                };\n                isClientFieldDescendant = false;\n                return [2 /*return*/, this.resolveSelectionSet(mainDefinition.selectionSet, isClientFieldDescendant, rootValue, execContext).then(function (result) { return ({\n                        result: result,\n                        exportedVariables: execContext.exportedVariables,\n                    }); })];\n            });\n        });\n    };\n    LocalState.prototype.resolveSelectionSet = function (selectionSet, isClientFieldDescendant, rootValue, execContext) {\n        return __awaiter(this, void 0, void 0, function () {\n            var fragmentMap, context, variables, resultsToMerge, execute;\n            var _this = this;\n            return __generator(this, function (_a) {\n                fragmentMap = execContext.fragmentMap, context = execContext.context, variables = execContext.variables;\n                resultsToMerge = [rootValue];\n                execute = function (selection) { return __awaiter(_this, void 0, void 0, function () {\n                    var fragment, typeCondition;\n                    return __generator(this, function (_a) {\n                        if (!isClientFieldDescendant &&\n                            !execContext.selectionsToResolve.has(selection)) {\n                            // Skip selections without @client directives\n                            // (still processing if one of the ancestors or one of the child fields has @client directive)\n                            return [2 /*return*/];\n                        }\n                        if (!shouldInclude(selection, variables)) {\n                            // Skip this entirely.\n                            return [2 /*return*/];\n                        }\n                        if (isField(selection)) {\n                            return [2 /*return*/, this.resolveField(selection, isClientFieldDescendant, rootValue, execContext).then(function (fieldResult) {\n                                    var _a;\n                                    if (typeof fieldResult !== \"undefined\") {\n                                        resultsToMerge.push((_a = {},\n                                            _a[resultKeyNameFromField(selection)] = fieldResult,\n                                            _a));\n                                    }\n                                })];\n                        }\n                        if (isInlineFragment(selection)) {\n                            fragment = selection;\n                        }\n                        else {\n                            // This is a named fragment.\n                            fragment = fragmentMap[selection.name.value];\n                            invariant(fragment, 18, selection.name.value);\n                        }\n                        if (fragment && fragment.typeCondition) {\n                            typeCondition = fragment.typeCondition.name.value;\n                            if (execContext.fragmentMatcher(rootValue, typeCondition, context)) {\n                                return [2 /*return*/, this.resolveSelectionSet(fragment.selectionSet, isClientFieldDescendant, rootValue, execContext).then(function (fragmentResult) {\n                                        resultsToMerge.push(fragmentResult);\n                                    })];\n                            }\n                        }\n                        return [2 /*return*/];\n                    });\n                }); };\n                return [2 /*return*/, Promise.all(selectionSet.selections.map(execute)).then(function () {\n                        return mergeDeepArray(resultsToMerge);\n                    })];\n            });\n        });\n    };\n    LocalState.prototype.resolveField = function (field, isClientFieldDescendant, rootValue, execContext) {\n        return __awaiter(this, void 0, void 0, function () {\n            var variables, fieldName, aliasedFieldName, aliasUsed, defaultResult, resultPromise, resolverType, resolverMap, resolve;\n            var _this = this;\n            return __generator(this, function (_a) {\n                if (!rootValue) {\n                    return [2 /*return*/, null];\n                }\n                variables = execContext.variables;\n                fieldName = field.name.value;\n                aliasedFieldName = resultKeyNameFromField(field);\n                aliasUsed = fieldName !== aliasedFieldName;\n                defaultResult = rootValue[aliasedFieldName] || rootValue[fieldName];\n                resultPromise = Promise.resolve(defaultResult);\n                // Usually all local resolvers are run when passing through here, but\n                // if we've specifically identified that we only want to run forced\n                // resolvers (that is, resolvers for fields marked with\n                // `@client(always: true)`), then we'll skip running non-forced resolvers.\n                if (!execContext.onlyRunForcedResolvers ||\n                    this.shouldForceResolvers(field)) {\n                    resolverType = rootValue.__typename || execContext.defaultOperationType;\n                    resolverMap = this.resolvers && this.resolvers[resolverType];\n                    if (resolverMap) {\n                        resolve = resolverMap[aliasUsed ? fieldName : aliasedFieldName];\n                        if (resolve) {\n                            resultPromise = Promise.resolve(\n                            // In case the resolve function accesses reactive variables,\n                            // set cacheSlot to the current cache instance.\n                            cacheSlot.withValue(this.cache, resolve, [\n                                rootValue,\n                                argumentsObjectFromField(field, variables),\n                                execContext.context,\n                                { field: field, fragmentMap: execContext.fragmentMap },\n                            ]));\n                        }\n                    }\n                }\n                return [2 /*return*/, resultPromise.then(function (result) {\n                        var _a, _b;\n                        if (result === void 0) { result = defaultResult; }\n                        // If an @export directive is associated with the current field, store\n                        // the `as` export variable name and current result for later use.\n                        if (field.directives) {\n                            field.directives.forEach(function (directive) {\n                                if (directive.name.value === \"export\" && directive.arguments) {\n                                    directive.arguments.forEach(function (arg) {\n                                        if (arg.name.value === \"as\" && arg.value.kind === \"StringValue\") {\n                                            execContext.exportedVariables[arg.value.value] = result;\n                                        }\n                                    });\n                                }\n                            });\n                        }\n                        // Handle all scalar types here.\n                        if (!field.selectionSet) {\n                            return result;\n                        }\n                        // From here down, the field has a selection set, which means it's trying\n                        // to query a GraphQLObjectType.\n                        if (result == null) {\n                            // Basically any field in a GraphQL response can be null, or missing\n                            return result;\n                        }\n                        var isClientField = (_b = (_a = field.directives) === null || _a === void 0 ? void 0 : _a.some(function (d) { return d.name.value === \"client\"; })) !== null && _b !== void 0 ? _b : false;\n                        if (Array.isArray(result)) {\n                            return _this.resolveSubSelectedArray(field, isClientFieldDescendant || isClientField, result, execContext);\n                        }\n                        // Returned value is an object, and the query has a sub-selection. Recurse.\n                        if (field.selectionSet) {\n                            return _this.resolveSelectionSet(field.selectionSet, isClientFieldDescendant || isClientField, result, execContext);\n                        }\n                    })];\n            });\n        });\n    };\n    LocalState.prototype.resolveSubSelectedArray = function (field, isClientFieldDescendant, result, execContext) {\n        var _this = this;\n        return Promise.all(result.map(function (item) {\n            if (item === null) {\n                return null;\n            }\n            // This is a nested array, recurse.\n            if (Array.isArray(item)) {\n                return _this.resolveSubSelectedArray(field, isClientFieldDescendant, item, execContext);\n            }\n            // This is an object, run the selection set on it.\n            if (field.selectionSet) {\n                return _this.resolveSelectionSet(field.selectionSet, isClientFieldDescendant, item, execContext);\n            }\n        }));\n    };\n    // Collect selection nodes on paths from document root down to all @client directives.\n    // This function takes into account transitive fragment spreads.\n    // Complexity equals to a single `visit` over the full document.\n    LocalState.prototype.collectSelectionsToResolve = function (mainDefinition, fragmentMap) {\n        var isSingleASTNode = function (node) { return !Array.isArray(node); };\n        var selectionsToResolveCache = this.selectionsToResolveCache;\n        function collectByDefinition(definitionNode) {\n            if (!selectionsToResolveCache.has(definitionNode)) {\n                var matches_1 = new Set();\n                selectionsToResolveCache.set(definitionNode, matches_1);\n                visit(definitionNode, {\n                    Directive: function (node, _, __, ___, ancestors) {\n                        if (node.name.value === \"client\") {\n                            ancestors.forEach(function (node) {\n                                if (isSingleASTNode(node) && isSelectionNode(node)) {\n                                    matches_1.add(node);\n                                }\n                            });\n                        }\n                    },\n                    FragmentSpread: function (spread, _, __, ___, ancestors) {\n                        var fragment = fragmentMap[spread.name.value];\n                        invariant(fragment, 19, spread.name.value);\n                        var fragmentSelections = collectByDefinition(fragment);\n                        if (fragmentSelections.size > 0) {\n                            // Fragment for this spread contains @client directive (either directly or transitively)\n                            // Collect selection nodes on paths from the root down to fields with the @client directive\n                            ancestors.forEach(function (node) {\n                                if (isSingleASTNode(node) && isSelectionNode(node)) {\n                                    matches_1.add(node);\n                                }\n                            });\n                            matches_1.add(spread);\n                            fragmentSelections.forEach(function (selection) {\n                                matches_1.add(selection);\n                            });\n                        }\n                    },\n                });\n            }\n            return selectionsToResolveCache.get(definitionNode);\n        }\n        return collectByDefinition(mainDefinition);\n    };\n    return LocalState;\n}());\nexport { LocalState };\n", "import { __assign } from \"tslib\";\nimport { equal } from \"@wry/equality\";\nimport { DeepMerger } from \"../utilities/index.js\";\nimport { mergeIncrementalData } from \"../utilities/index.js\";\nimport { reobserveCacheFirst } from \"./ObservableQuery.js\";\nimport { isNonEmptyArray, graphQLResultHasError, canUseWeakMap, } from \"../utilities/index.js\";\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\nvar destructiveMethodCounts = new (canUseWeakMap ? WeakMap : Map)();\nfunction wrapDestructiveCacheMethod(cache, methodName) {\n    var original = cache[methodName];\n    if (typeof original === \"function\") {\n        // @ts-expect-error this is just too generic to be typed correctly\n        cache[methodName] = function () {\n            destructiveMethodCounts.set(cache, \n            // The %1e15 allows the count to wrap around to 0 safely every\n            // quadrillion evictions, so there's no risk of overflow. To be\n            // clear, this is more of a pedantic principle than something\n            // that matters in any conceivable practical scenario.\n            (destructiveMethodCounts.get(cache) + 1) % 1e15);\n            // @ts-expect-error this is just too generic to be typed correctly\n            return original.apply(this, arguments);\n        };\n    }\n}\nfunction cancelNotifyTimeout(info) {\n    if (info[\"notifyTimeout\"]) {\n        clearTimeout(info[\"notifyTimeout\"]);\n        info[\"notifyTimeout\"] = void 0;\n    }\n}\n// A QueryInfo object represents a single query managed by the\n// QueryManager, which tracks all QueryInfo objects by queryId in its\n// this.queries Map. QueryInfo objects store the latest results and errors\n// for the given query, and are responsible for reporting those results to\n// the corresponding ObservableQuery, via the QueryInfo.notify method.\n// Results are reported asynchronously whenever setDiff marks the\n// QueryInfo object as dirty, though a call to the QueryManager's\n// broadcastQueries method may trigger the notification before it happens\n// automatically. This class used to be a simple interface type without\n// any field privacy or meaningful methods, which is why it still has so\n// many public fields. The effort to lock down and simplify the QueryInfo\n// interface is ongoing, and further improvements are welcome.\nvar QueryInfo = /** @class */ (function () {\n    function QueryInfo(queryManager, queryId) {\n        if (queryId === void 0) { queryId = queryManager.generateQueryId(); }\n        this.queryId = queryId;\n        this.listeners = new Set();\n        this.document = null;\n        this.lastRequestId = 1;\n        this.stopped = false;\n        this.dirty = false;\n        this.observableQuery = null;\n        var cache = (this.cache = queryManager.cache);\n        // Track how often cache.evict is called, since we want eviction to\n        // override the feud-stopping logic in the markResult method, by\n        // causing shouldWrite to return true. Wrapping the cache.evict method\n        // is a bit of a hack, but it saves us from having to make eviction\n        // counting an official part of the ApolloCache API.\n        if (!destructiveMethodCounts.has(cache)) {\n            destructiveMethodCounts.set(cache, 0);\n            wrapDestructiveCacheMethod(cache, \"evict\");\n            wrapDestructiveCacheMethod(cache, \"modify\");\n            wrapDestructiveCacheMethod(cache, \"reset\");\n        }\n    }\n    QueryInfo.prototype.init = function (query) {\n        var networkStatus = query.networkStatus || NetworkStatus.loading;\n        if (this.variables &&\n            this.networkStatus !== NetworkStatus.loading &&\n            !equal(this.variables, query.variables)) {\n            networkStatus = NetworkStatus.setVariables;\n        }\n        if (!equal(query.variables, this.variables)) {\n            this.lastDiff = void 0;\n        }\n        Object.assign(this, {\n            document: query.document,\n            variables: query.variables,\n            networkError: null,\n            graphQLErrors: this.graphQLErrors || [],\n            networkStatus: networkStatus,\n        });\n        if (query.observableQuery) {\n            this.setObservableQuery(query.observableQuery);\n        }\n        if (query.lastRequestId) {\n            this.lastRequestId = query.lastRequestId;\n        }\n        return this;\n    };\n    QueryInfo.prototype.reset = function () {\n        cancelNotifyTimeout(this);\n        this.dirty = false;\n    };\n    QueryInfo.prototype.resetDiff = function () {\n        this.lastDiff = void 0;\n    };\n    QueryInfo.prototype.getDiff = function () {\n        var options = this.getDiffOptions();\n        if (this.lastDiff && equal(options, this.lastDiff.options)) {\n            return this.lastDiff.diff;\n        }\n        this.updateWatch(this.variables);\n        var oq = this.observableQuery;\n        if (oq && oq.options.fetchPolicy === \"no-cache\") {\n            return { complete: false };\n        }\n        var diff = this.cache.diff(options);\n        this.updateLastDiff(diff, options);\n        return diff;\n    };\n    QueryInfo.prototype.updateLastDiff = function (diff, options) {\n        this.lastDiff =\n            diff ?\n                {\n                    diff: diff,\n                    options: options || this.getDiffOptions(),\n                }\n                : void 0;\n    };\n    QueryInfo.prototype.getDiffOptions = function (variables) {\n        var _a;\n        if (variables === void 0) { variables = this.variables; }\n        return {\n            query: this.document,\n            variables: variables,\n            returnPartialData: true,\n            optimistic: true,\n            canonizeResults: (_a = this.observableQuery) === null || _a === void 0 ? void 0 : _a.options.canonizeResults,\n        };\n    };\n    QueryInfo.prototype.setDiff = function (diff) {\n        var _this = this;\n        var oldDiff = this.lastDiff && this.lastDiff.diff;\n        this.updateLastDiff(diff);\n        if (!this.dirty && !equal(oldDiff && oldDiff.result, diff && diff.result)) {\n            this.dirty = true;\n            if (!this.notifyTimeout) {\n                this.notifyTimeout = setTimeout(function () { return _this.notify(); }, 0);\n            }\n        }\n    };\n    QueryInfo.prototype.setObservableQuery = function (oq) {\n        var _this = this;\n        if (oq === this.observableQuery)\n            return;\n        if (this.oqListener) {\n            this.listeners.delete(this.oqListener);\n        }\n        this.observableQuery = oq;\n        if (oq) {\n            oq[\"queryInfo\"] = this;\n            this.listeners.add((this.oqListener = function () {\n                var diff = _this.getDiff();\n                if (diff.fromOptimisticTransaction) {\n                    // If this diff came from an optimistic transaction, deliver the\n                    // current cache data to the ObservableQuery, but don't perform a\n                    // reobservation, since oq.reobserveCacheFirst might make a network\n                    // request, and we never want to trigger network requests in the\n                    // middle of optimistic updates.\n                    oq[\"observe\"]();\n                }\n                else {\n                    // Otherwise, make the ObservableQuery \"reobserve\" the latest data\n                    // using a temporary fetch policy of \"cache-first\", so complete cache\n                    // results have a chance to be delivered without triggering additional\n                    // network requests, even when options.fetchPolicy is \"network-only\"\n                    // or \"cache-and-network\". All other fetch policies are preserved by\n                    // this method, and are handled by calling oq.reobserve(). If this\n                    // reobservation is spurious, isDifferentFromLastResult still has a\n                    // chance to catch it before delivery to ObservableQuery subscribers.\n                    reobserveCacheFirst(oq);\n                }\n            }));\n        }\n        else {\n            delete this.oqListener;\n        }\n    };\n    QueryInfo.prototype.notify = function () {\n        var _this = this;\n        cancelNotifyTimeout(this);\n        if (this.shouldNotify()) {\n            this.listeners.forEach(function (listener) { return listener(_this); });\n        }\n        this.dirty = false;\n    };\n    QueryInfo.prototype.shouldNotify = function () {\n        if (!this.dirty || !this.listeners.size) {\n            return false;\n        }\n        if (isNetworkRequestInFlight(this.networkStatus) && this.observableQuery) {\n            var fetchPolicy = this.observableQuery.options.fetchPolicy;\n            if (fetchPolicy !== \"cache-only\" && fetchPolicy !== \"cache-and-network\") {\n                return false;\n            }\n        }\n        return true;\n    };\n    QueryInfo.prototype.stop = function () {\n        if (!this.stopped) {\n            this.stopped = true;\n            // Cancel the pending notify timeout\n            this.reset();\n            this.cancel();\n            // Revert back to the no-op version of cancel inherited from\n            // QueryInfo.prototype.\n            this.cancel = QueryInfo.prototype.cancel;\n            var oq = this.observableQuery;\n            if (oq)\n                oq.stopPolling();\n        }\n    };\n    // This method is a no-op by default, until/unless overridden by the\n    // updateWatch method.\n    QueryInfo.prototype.cancel = function () { };\n    QueryInfo.prototype.updateWatch = function (variables) {\n        var _this = this;\n        if (variables === void 0) { variables = this.variables; }\n        var oq = this.observableQuery;\n        if (oq && oq.options.fetchPolicy === \"no-cache\") {\n            return;\n        }\n        var watchOptions = __assign(__assign({}, this.getDiffOptions(variables)), { watcher: this, callback: function (diff) { return _this.setDiff(diff); } });\n        if (!this.lastWatch || !equal(watchOptions, this.lastWatch)) {\n            this.cancel();\n            this.cancel = this.cache.watch((this.lastWatch = watchOptions));\n        }\n    };\n    QueryInfo.prototype.resetLastWrite = function () {\n        this.lastWrite = void 0;\n    };\n    QueryInfo.prototype.shouldWrite = function (result, variables) {\n        var lastWrite = this.lastWrite;\n        return !(lastWrite &&\n            // If cache.evict has been called since the last time we wrote this\n            // data into the cache, there's a chance writing this result into\n            // the cache will repair what was evicted.\n            lastWrite.dmCount === destructiveMethodCounts.get(this.cache) &&\n            equal(variables, lastWrite.variables) &&\n            equal(result.data, lastWrite.result.data));\n    };\n    QueryInfo.prototype.markResult = function (result, document, options, cacheWriteBehavior) {\n        var _this = this;\n        var merger = new DeepMerger();\n        var graphQLErrors = isNonEmptyArray(result.errors) ? result.errors.slice(0) : [];\n        // Cancel the pending notify timeout (if it exists) to prevent extraneous network\n        // requests. To allow future notify timeouts, diff and dirty are reset as well.\n        this.reset();\n        if (\"incremental\" in result && isNonEmptyArray(result.incremental)) {\n            var mergedData = mergeIncrementalData(this.getDiff().result, result);\n            result.data = mergedData;\n            // Detect the first chunk of a deferred query and merge it with existing\n            // cache data. This ensures a `cache-first` fetch policy that returns\n            // partial cache data or a `cache-and-network` fetch policy that already\n            // has full data in the cache does not complain when trying to merge the\n            // initial deferred server data with existing cache data.\n        }\n        else if (\"hasNext\" in result && result.hasNext) {\n            var diff = this.getDiff();\n            result.data = merger.merge(diff.result, result.data);\n        }\n        this.graphQLErrors = graphQLErrors;\n        if (options.fetchPolicy === \"no-cache\") {\n            this.updateLastDiff({ result: result.data, complete: true }, this.getDiffOptions(options.variables));\n        }\n        else if (cacheWriteBehavior !== 0 /* CacheWriteBehavior.FORBID */) {\n            if (shouldWriteResult(result, options.errorPolicy)) {\n                // Using a transaction here so we have a chance to read the result\n                // back from the cache before the watch callback fires as a result\n                // of writeQuery, so we can store the new diff quietly and ignore\n                // it when we receive it redundantly from the watch callback.\n                this.cache.performTransaction(function (cache) {\n                    if (_this.shouldWrite(result, options.variables)) {\n                        cache.writeQuery({\n                            query: document,\n                            data: result.data,\n                            variables: options.variables,\n                            overwrite: cacheWriteBehavior === 1 /* CacheWriteBehavior.OVERWRITE */,\n                        });\n                        _this.lastWrite = {\n                            result: result,\n                            variables: options.variables,\n                            dmCount: destructiveMethodCounts.get(_this.cache),\n                        };\n                    }\n                    else {\n                        // If result is the same as the last result we received from\n                        // the network (and the variables match too), avoid writing\n                        // result into the cache again. The wisdom of skipping this\n                        // cache write is far from obvious, since any cache write\n                        // could be the one that puts the cache back into a desired\n                        // state, fixing corruption or missing data. However, if we\n                        // always write every network result into the cache, we enable\n                        // feuds between queries competing to update the same data in\n                        // incompatible ways, which can lead to an endless cycle of\n                        // cache broadcasts and useless network requests. As with any\n                        // feud, eventually one side must step back from the brink,\n                        // letting the other side(s) have the last word(s). There may\n                        // be other points where we could break this cycle, such as\n                        // silencing the broadcast for cache.writeQuery (not a good\n                        // idea, since it just delays the feud a bit) or somehow\n                        // avoiding the network request that just happened (also bad,\n                        // because the server could return useful new data). All\n                        // options considered, skipping this cache write seems to be\n                        // the least damaging place to break the cycle, because it\n                        // reflects the intuition that we recently wrote this exact\n                        // result into the cache, so the cache *should* already/still\n                        // contain this data. If some other query has clobbered that\n                        // data in the meantime, that's too bad, but there will be no\n                        // winners if every query blindly reverts to its own version\n                        // of the data. This approach also gives the network a chance\n                        // to return new data, which will be written into the cache as\n                        // usual, notifying only those queries that are directly\n                        // affected by the cache updates, as usual. In the future, an\n                        // even more sophisticated cache could perhaps prevent or\n                        // mitigate the clobbering somehow, but that would make this\n                        // particular cache write even less important, and thus\n                        // skipping it would be even safer than it is today.\n                        if (_this.lastDiff && _this.lastDiff.diff.complete) {\n                            // Reuse data from the last good (complete) diff that we\n                            // received, when possible.\n                            result.data = _this.lastDiff.diff.result;\n                            return;\n                        }\n                        // If the previous this.diff was incomplete, fall through to\n                        // re-reading the latest data with cache.diff, below.\n                    }\n                    var diffOptions = _this.getDiffOptions(options.variables);\n                    var diff = cache.diff(diffOptions);\n                    // In case the QueryManager stops this QueryInfo before its\n                    // results are delivered, it's important to avoid restarting the\n                    // cache watch when markResult is called. We also avoid updating\n                    // the watch if we are writing a result that doesn't match the current\n                    // variables to avoid race conditions from broadcasting the wrong\n                    // result.\n                    if (!_this.stopped && equal(_this.variables, options.variables)) {\n                        // Any time we're about to update this.diff, we need to make\n                        // sure we've started watching the cache.\n                        _this.updateWatch(options.variables);\n                    }\n                    // If we're allowed to write to the cache, and we can read a\n                    // complete result from the cache, update result.data to be the\n                    // result from the cache, rather than the raw network result.\n                    // Set without setDiff to avoid triggering a notify call, since\n                    // we have other ways of notifying for this result.\n                    _this.updateLastDiff(diff, diffOptions);\n                    if (diff.complete) {\n                        result.data = diff.result;\n                    }\n                });\n            }\n            else {\n                this.lastWrite = void 0;\n            }\n        }\n    };\n    QueryInfo.prototype.markReady = function () {\n        this.networkError = null;\n        return (this.networkStatus = NetworkStatus.ready);\n    };\n    QueryInfo.prototype.markError = function (error) {\n        this.networkStatus = NetworkStatus.error;\n        this.lastWrite = void 0;\n        this.reset();\n        if (error.graphQLErrors) {\n            this.graphQLErrors = error.graphQLErrors;\n        }\n        if (error.networkError) {\n            this.networkError = error.networkError;\n        }\n        return error;\n    };\n    return QueryInfo;\n}());\nexport { QueryInfo };\nexport function shouldWriteResult(result, errorPolicy) {\n    if (errorPolicy === void 0) { errorPolicy = \"none\"; }\n    var ignoreErrors = errorPolicy === \"ignore\" || errorPolicy === \"all\";\n    var writeWithErrors = !graphQLResultHasError(result);\n    if (!writeWithErrors && ignoreErrors && result.data) {\n        writeWithErrors = true;\n    }\n    return writeWithErrors;\n}\n", "/* Core */\nexport { ApolloClient, mergeOptions } from \"./ApolloClient.js\";\nexport { ObservableQuery } from \"./ObservableQuery.js\";\nexport { NetworkStatus, isNetworkRequestSettled } from \"./networkStatus.js\";\nexport * from \"./types.js\";\nexport { isApolloError, ApolloError } from \"../errors/index.js\";\nexport { Cache, ApolloCache, InMemoryCache, MissingFieldError, defaultDataIdFromObject, makeVar, } from \"../cache/index.js\";\nexport * from \"../cache/inmemory/types.js\";\n/* Link */\nexport * from \"../link/core/index.js\";\nexport * from \"../link/http/index.js\";\nexport { fromError, toPromise, fromPromise, throwServerError, } from \"../link/utils/index.js\";\nexport { DocumentTransform, Observable, isReference, makeReference, } from \"../utilities/index.js\";\n/* Supporting */\n// The verbosity of invariant.{log,warn,error} can be controlled globally\n// (for anyone using the same ts-invariant package) by passing \"log\",\n// \"warn\", \"error\", or \"silent\" to setVerbosity (\"log\" is the default).\n// Note that all invariant.* logging is hidden in production.\nimport { setVerbosity } from \"ts-invariant\";\nexport { setVerbosity as setLogVerbosity };\nsetVerbosity(globalThis.__DEV__ !== false ? \"log\" : \"silent\");\n// Note that importing `gql` by itself, then destructuring\n// additional properties separately before exporting, is intentional.\n// Due to the way the `graphql-tag` library is setup, certain bundlers\n// can't find the properties added to the exported `gql` function without\n// additional guidance (e.g. Rollup - see\n// https://rollupjs.org/guide/en/#error-name-is-not-exported-by-module).\n// Instead of having people that are using bundlers with `@apollo/client` add\n// extra bundler config to help `graphql-tag` exports be found (which would be\n// awkward since they aren't importing `graphql-tag` themselves), this\n// workaround of pulling the extra properties off the `gql` function,\n// then re-exporting them separately, helps keeps bundlers happy without any\n// additional config changes.\nexport { gql, resetCaches, disableFragmentWarnings, enableExperimentalFragmentVariables, disableExperimentalFragmentVariables, } from \"graphql-tag\";\n"],
  "mappings": "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",
  "names": ["ApolloLink", "NetworkStatus", "err", "ApolloError", "print", "_a", "version", "_b", "_c", "parseError", "HttpLink", "hasOwnProperty", "ObservableQuery", "_a", "info", "LocalState", "execute", "_a", "node", "QueryInfo", "diff", "hasOwnProperty", "QueryManager", "defaultOptions", "hasClientExports", "cache", "diff", "result", "variables", "sourcesWithInfo", "_a", "networkStatus", "data", "ApolloClient", "defaultOptions", "result"]
}
