{
  "version": 3,
  "sources": ["../../../../../node_modules/.pnpm/@ngrx+router-store@17.0.1_@angular+common@18.0.1_@angular+core@18.0.1_rxjs@7.8.1_zone.js@0.14_ei5xluz2xy3oeswphhlg5cbb54/node_modules/@ngrx/router-store/fesm2022/ngrx-router-store.mjs"],
  "sourcesContent": ["import * as i1 from '@ngrx/store';\nimport { props, createAction, isNgrxMockEnvironment, select, ACTIVE_RUNTIME_CHECKS, createFeatureSelector, createSelector } from '@ngrx/store';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, isDevMode, Injectable, Inject, ENVIRONMENT_INITIALIZER, inject, makeEnvironmentProviders, NgModule } from '@angular/core';\nimport * as i2 from '@angular/router';\nimport { NavigationStart, RoutesRecognized, NavigationCancel, NavigationError, NavigationEnd } from '@angular/router';\nimport { withLatestFrom } from 'rxjs/operators';\n\n/**\n * An action dispatched when a router navigation request is fired.\n */\nconst ROUTER_REQUEST = '@ngrx/router-store/request';\nconst routerRequestAction = createAction(ROUTER_REQUEST, props());\n/**\n * An action dispatched when the router navigates.\n */\nconst ROUTER_NAVIGATION = '@ngrx/router-store/navigation';\nconst routerNavigationAction = createAction(ROUTER_NAVIGATION, props());\n/**\n * An action dispatched when the router cancels navigation.\n */\nconst ROUTER_CANCEL = '@ngrx/router-store/cancel';\nconst routerCancelAction = createAction(ROUTER_CANCEL, props());\n/**\n * An action dispatched when the router errors.\n */\nconst ROUTER_ERROR = '@ngrx/router-store/error';\nconst routerErrorAction = createAction(ROUTER_ERROR, props());\n/**\n * An action dispatched after navigation has ended and new route is active.\n */\nconst ROUTER_NAVIGATED = '@ngrx/router-store/navigated';\nconst routerNavigatedAction = createAction(ROUTER_NAVIGATED, props());\nfunction routerReducer(state, action) {\n  // Allow compilation with strictFunctionTypes - ref: #1344\n  const routerAction = action;\n  switch (routerAction.type) {\n    case ROUTER_NAVIGATION:\n    case ROUTER_ERROR:\n    case ROUTER_CANCEL:\n      return {\n        state: routerAction.payload.routerState,\n        navigationId: routerAction.payload.event.id\n      };\n    default:\n      return state;\n  }\n}\nclass MinimalRouterStateSerializer {\n  serialize(routerState) {\n    return {\n      root: this.serializeRoute(routerState.root),\n      url: routerState.url\n    };\n  }\n  serializeRoute(route) {\n    const children = route.children.map(c => this.serializeRoute(c));\n    return {\n      params: route.params,\n      data: route.data,\n      url: route.url,\n      outlet: route.outlet,\n      title: route.title,\n      routeConfig: route.routeConfig ? {\n        path: route.routeConfig.path,\n        pathMatch: route.routeConfig.pathMatch,\n        redirectTo: route.routeConfig.redirectTo,\n        outlet: route.routeConfig.outlet,\n        title: typeof route.routeConfig.title === 'string' ? route.routeConfig.title : undefined\n      } : null,\n      queryParams: route.queryParams,\n      fragment: route.fragment,\n      firstChild: children[0],\n      children\n    };\n  }\n}\nvar NavigationActionTiming;\n(function (NavigationActionTiming) {\n  NavigationActionTiming[NavigationActionTiming[\"PreActivation\"] = 1] = \"PreActivation\";\n  NavigationActionTiming[NavigationActionTiming[\"PostActivation\"] = 2] = \"PostActivation\";\n})(NavigationActionTiming || (NavigationActionTiming = {}));\nconst DEFAULT_ROUTER_FEATURENAME = 'router';\nconst _ROUTER_CONFIG = new InjectionToken('@ngrx/router-store Internal Configuration');\nconst ROUTER_CONFIG = new InjectionToken('@ngrx/router-store Configuration');\nfunction _createRouterConfig(config) {\n  return {\n    stateKey: DEFAULT_ROUTER_FEATURENAME,\n    serializer: MinimalRouterStateSerializer,\n    navigationActionTiming: NavigationActionTiming.PreActivation,\n    ...config\n  };\n}\nclass FullRouterStateSerializer {\n  serialize(routerState) {\n    return {\n      root: this.serializeRoute(routerState.root),\n      url: routerState.url\n    };\n  }\n  serializeRoute(route) {\n    const children = route.children.map(c => this.serializeRoute(c));\n    return {\n      params: route.params,\n      paramMap: route.paramMap,\n      data: route.data,\n      url: route.url,\n      outlet: route.outlet,\n      title: route.title,\n      routeConfig: route.routeConfig ? {\n        component: route.routeConfig.component,\n        path: route.routeConfig.path,\n        pathMatch: route.routeConfig.pathMatch,\n        redirectTo: route.routeConfig.redirectTo,\n        outlet: route.routeConfig.outlet,\n        title: route.routeConfig.title\n      } : null,\n      queryParams: route.queryParams,\n      queryParamMap: route.queryParamMap,\n      fragment: route.fragment,\n      component: route.routeConfig ? route.routeConfig.component : undefined,\n      root: undefined,\n      parent: undefined,\n      firstChild: children[0],\n      pathFromRoot: undefined,\n      children\n    };\n  }\n}\nclass RouterStateSerializer {}\nvar RouterTrigger;\n(function (RouterTrigger) {\n  RouterTrigger[RouterTrigger[\"NONE\"] = 1] = \"NONE\";\n  RouterTrigger[RouterTrigger[\"ROUTER\"] = 2] = \"ROUTER\";\n  RouterTrigger[RouterTrigger[\"STORE\"] = 3] = \"STORE\";\n})(RouterTrigger || (RouterTrigger = {}));\n/**\n * Shared router initialization logic used alongside both the StoreRouterConnectingModule and the provideRouterStore\n * function\n */\nclass StoreRouterConnectingService {\n  constructor(store, router, serializer, errorHandler, config, activeRuntimeChecks) {\n    this.store = store;\n    this.router = router;\n    this.serializer = serializer;\n    this.errorHandler = errorHandler;\n    this.config = config;\n    this.activeRuntimeChecks = activeRuntimeChecks;\n    this.lastEvent = null;\n    this.routerState = null;\n    this.trigger = RouterTrigger.NONE;\n    this.stateKey = this.config.stateKey;\n    if (!isNgrxMockEnvironment() && isDevMode() && (activeRuntimeChecks?.strictActionSerializability || activeRuntimeChecks?.strictStateSerializability) && this.serializer instanceof FullRouterStateSerializer) {\n      console.warn('@ngrx/router-store: The serializability runtime checks cannot be enabled ' + 'with the FullRouterStateSerializer. The FullRouterStateSerializer ' + 'has an unserializable router state and actions that are not serializable. ' + 'To use the serializability runtime checks either use ' + 'the MinimalRouterStateSerializer or implement a custom router state serializer.');\n    }\n    this.setUpStoreStateListener();\n    this.setUpRouterEventsListener();\n  }\n  setUpStoreStateListener() {\n    this.store.pipe(select(this.stateKey), withLatestFrom(this.store)).subscribe(([routerStoreState, storeState]) => {\n      this.navigateIfNeeded(routerStoreState, storeState);\n    });\n  }\n  navigateIfNeeded(routerStoreState, storeState) {\n    if (!routerStoreState || !routerStoreState.state) {\n      return;\n    }\n    if (this.trigger === RouterTrigger.ROUTER) {\n      return;\n    }\n    if (this.lastEvent instanceof NavigationStart) {\n      return;\n    }\n    const url = routerStoreState.state.url;\n    if (!isSameUrl(this.router.url, url)) {\n      this.storeState = storeState;\n      this.trigger = RouterTrigger.STORE;\n      this.router.navigateByUrl(url).catch(error => {\n        this.errorHandler.handleError(error);\n      });\n    }\n  }\n  setUpRouterEventsListener() {\n    const dispatchNavLate = this.config.navigationActionTiming === NavigationActionTiming.PostActivation;\n    let routesRecognized;\n    this.router.events.pipe(withLatestFrom(this.store)).subscribe(([event, storeState]) => {\n      this.lastEvent = event;\n      if (event instanceof NavigationStart) {\n        this.routerState = this.serializer.serialize(this.router.routerState.snapshot);\n        if (this.trigger !== RouterTrigger.STORE) {\n          this.storeState = storeState;\n          this.dispatchRouterRequest(event);\n        }\n      } else if (event instanceof RoutesRecognized) {\n        routesRecognized = event;\n        if (!dispatchNavLate && this.trigger !== RouterTrigger.STORE) {\n          this.dispatchRouterNavigation(event);\n        }\n      } else if (event instanceof NavigationCancel) {\n        this.dispatchRouterCancel(event);\n        this.reset();\n      } else if (event instanceof NavigationError) {\n        this.dispatchRouterError(event);\n        this.reset();\n      } else if (event instanceof NavigationEnd) {\n        if (this.trigger !== RouterTrigger.STORE) {\n          if (dispatchNavLate) {\n            this.dispatchRouterNavigation(routesRecognized);\n          }\n          this.dispatchRouterNavigated(event);\n        }\n        this.reset();\n      }\n    });\n  }\n  dispatchRouterRequest(event) {\n    this.dispatchRouterAction(ROUTER_REQUEST, {\n      event\n    });\n  }\n  dispatchRouterNavigation(lastRoutesRecognized) {\n    const nextRouterState = this.serializer.serialize(lastRoutesRecognized.state);\n    this.dispatchRouterAction(ROUTER_NAVIGATION, {\n      routerState: nextRouterState,\n      event: new RoutesRecognized(lastRoutesRecognized.id, lastRoutesRecognized.url, lastRoutesRecognized.urlAfterRedirects, nextRouterState)\n    });\n  }\n  dispatchRouterCancel(event) {\n    this.dispatchRouterAction(ROUTER_CANCEL, {\n      storeState: this.storeState,\n      event\n    });\n  }\n  dispatchRouterError(event) {\n    this.dispatchRouterAction(ROUTER_ERROR, {\n      storeState: this.storeState,\n      event: new NavigationError(event.id, event.url, `${event}`)\n    });\n  }\n  dispatchRouterNavigated(event) {\n    const routerState = this.serializer.serialize(this.router.routerState.snapshot);\n    this.dispatchRouterAction(ROUTER_NAVIGATED, {\n      event,\n      routerState\n    });\n  }\n  dispatchRouterAction(type, payload) {\n    this.trigger = RouterTrigger.ROUTER;\n    try {\n      this.store.dispatch({\n        type,\n        payload: {\n          routerState: this.routerState,\n          ...payload,\n          event: this.config.routerState === 0 /* RouterState.Full */ ? payload.event : {\n            id: payload.event.id,\n            url: payload.event.url,\n            // safe, as it will just be `undefined` for non-NavigationEnd router events\n            urlAfterRedirects: payload.event.urlAfterRedirects\n          }\n        }\n      });\n    } finally {\n      this.trigger = RouterTrigger.NONE;\n    }\n  }\n  reset() {\n    this.trigger = RouterTrigger.NONE;\n    this.storeState = null;\n    this.routerState = null;\n  }\n  /** @nocollapse */\n  static {\n    this.ɵfac = function StoreRouterConnectingService_Factory(t) {\n      return new (t || StoreRouterConnectingService)(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.Router), i0.ɵɵinject(RouterStateSerializer), i0.ɵɵinject(i0.ErrorHandler), i0.ɵɵinject(ROUTER_CONFIG), i0.ɵɵinject(ACTIVE_RUNTIME_CHECKS));\n    };\n  }\n  /** @nocollapse */\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: StoreRouterConnectingService,\n      factory: StoreRouterConnectingService.ɵfac\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StoreRouterConnectingService, [{\n    type: Injectable\n  }], () => [{\n    type: i1.Store\n  }, {\n    type: i2.Router\n  }, {\n    type: RouterStateSerializer\n  }, {\n    type: i0.ErrorHandler\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [ROUTER_CONFIG]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [ACTIVE_RUNTIME_CHECKS]\n    }]\n  }], null);\n})();\n/**\n * Check if the URLs are matching. Accounts for the possibility of trailing \"/\" in url.\n */\nfunction isSameUrl(first, second) {\n  return stripTrailingSlash(first) === stripTrailingSlash(second);\n}\nfunction stripTrailingSlash(text) {\n  if (text?.length > 0 && text[text.length - 1] === '/') {\n    return text.substring(0, text.length - 1);\n  }\n  return text;\n}\n\n/**\n * Connects the Angular Router to the Store.\n *\n * @usageNotes\n *\n * ```ts\n * bootstrapApplication(AppComponent, {\n *   providers: [\n *     provideStore({ router: routerReducer }),\n *     provideRouterStore(),\n *   ],\n * });\n * ```\n */\nfunction provideRouterStore(config = {}) {\n  return makeEnvironmentProviders([{\n    provide: _ROUTER_CONFIG,\n    useValue: config\n  }, {\n    provide: ROUTER_CONFIG,\n    useFactory: _createRouterConfig,\n    deps: [_ROUTER_CONFIG]\n  }, {\n    provide: RouterStateSerializer,\n    useClass: config.serializer ? config.serializer : config.routerState === 0 /* RouterState.Full */ ? FullRouterStateSerializer : MinimalRouterStateSerializer\n  }, {\n    provide: ENVIRONMENT_INITIALIZER,\n    multi: true,\n    useFactory() {\n      return () => inject(StoreRouterConnectingService);\n    }\n  }, StoreRouterConnectingService]);\n}\n\n/**\n * Connects RouterModule with StoreModule.\n *\n * During the navigation, before any guards or resolvers run, the router will dispatch\n * a ROUTER_NAVIGATION action, which has the following signature:\n *\n * ```\n * export type RouterNavigationPayload = {\n *   routerState: SerializedRouterStateSnapshot,\n *   event: RoutesRecognized\n * }\n * ```\n *\n * Either a reducer or an effect can be invoked in response to this action.\n * If the invoked reducer throws, the navigation will be canceled.\n *\n * If navigation gets canceled because of a guard, a ROUTER_CANCEL action will be\n * dispatched. If navigation results in an error, a ROUTER_ERROR action will be dispatched.\n *\n * Both ROUTER_CANCEL and ROUTER_ERROR contain the store state before the navigation\n * which can be used to restore the consistency of the store.\n *\n * Usage:\n *\n * ```typescript\n * @NgModule({\n *   declarations: [AppCmp, SimpleCmp],\n *   imports: [\n *     BrowserModule,\n *     StoreModule.forRoot(mapOfReducers),\n *     RouterModule.forRoot([\n *       { path: '', component: SimpleCmp },\n *       { path: 'next', component: SimpleCmp }\n *     ]),\n *     StoreRouterConnectingModule.forRoot()\n *   ],\n *   bootstrap: [AppCmp]\n * })\n * export class AppModule {\n * }\n * ```\n */\nclass StoreRouterConnectingModule {\n  static forRoot(config = {}) {\n    return {\n      ngModule: StoreRouterConnectingModule,\n      providers: [provideRouterStore(config)]\n    };\n  }\n  /** @nocollapse */\n  static {\n    this.ɵfac = function StoreRouterConnectingModule_Factory(t) {\n      return new (t || StoreRouterConnectingModule)();\n    };\n  }\n  /** @nocollapse */\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: StoreRouterConnectingModule\n    });\n  }\n  /** @nocollapse */\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StoreRouterConnectingModule, [{\n    type: NgModule,\n    args: [{}]\n  }], null, null);\n})();\nfunction createRouterSelector() {\n  return createFeatureSelector(DEFAULT_ROUTER_FEATURENAME);\n}\nfunction getRouterSelectors(selectState = createRouterSelector()) {\n  const selectRouterState = createSelector(selectState, router => router && router.state);\n  const selectRootRoute = createSelector(selectRouterState, routerState => routerState && routerState.root);\n  const selectCurrentRoute = createSelector(selectRootRoute, rootRoute => {\n    if (!rootRoute) {\n      return undefined;\n    }\n    let route = rootRoute;\n    while (route.firstChild) {\n      route = route.firstChild;\n    }\n    return route;\n  });\n  const selectFragment = createSelector(selectRootRoute, route => route && route.fragment);\n  const selectQueryParams = createSelector(selectRootRoute, route => route && route.queryParams);\n  const selectQueryParam = param => createSelector(selectQueryParams, params => params && params[param]);\n  const selectRouteParams = createSelector(selectCurrentRoute, route => route && route.params);\n  const selectRouteParam = param => createSelector(selectRouteParams, params => params && params[param]);\n  const selectRouteData = createSelector(selectCurrentRoute, route => route && route.data);\n  const selectRouteDataParam = param => createSelector(selectRouteData, data => data && data[param]);\n  const selectUrl = createSelector(selectRouterState, routerState => routerState && routerState.url);\n  const selectTitle = createSelector(selectCurrentRoute, route => {\n    if (!route?.routeConfig) {\n      return undefined;\n    }\n    return typeof route.routeConfig.title === 'string' ? route.routeConfig.title // static title\n    : route.title; // resolved title\n  });\n  return {\n    selectCurrentRoute,\n    selectFragment,\n    selectQueryParams,\n    selectQueryParam,\n    selectRouteParams,\n    selectRouteParam,\n    selectRouteData,\n    selectRouteDataParam,\n    selectUrl,\n    selectTitle\n  };\n}\n\n/**\n * DO NOT EDIT\n *\n * This file is automatically generated at build\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DEFAULT_ROUTER_FEATURENAME, FullRouterStateSerializer, MinimalRouterStateSerializer, NavigationActionTiming, ROUTER_CANCEL, ROUTER_CONFIG, ROUTER_ERROR, ROUTER_NAVIGATED, ROUTER_NAVIGATION, ROUTER_REQUEST, RouterStateSerializer, StoreRouterConnectingModule, createRouterSelector, getRouterSelectors, provideRouterStore, routerCancelAction, routerErrorAction, routerNavigatedAction, routerNavigationAction, routerReducer, routerRequestAction };\n"],
  "mappings": "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",
  "names": ["NavigationActionTiming", "RouterTrigger"]
}
